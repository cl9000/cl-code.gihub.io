<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weichanglu</title>
  <icon>https://www.gravatar.com/avatar/749a0cb196d7f8d7b7f41d5a5fa372e4</icon>
  <subtitle>你知道的越多，你不知道的越多</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cl9000.github.io/"/>
  <updated>2021-09-17T10:37:40.657Z</updated>
  <id>https://cl9000.github.io/</id>
  
  <author>
    <name>cl9000</name>
    <email>cl9000@126.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 计算阶乘 - 迭代和递归</title>
    <link href="https://cl9000.github.io/2021/08/18/JavaScript-%E8%AE%A1%E7%AE%97%E9%98%B6%E4%B9%98-%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/"/>
    <id>https://cl9000.github.io/2021/08/18/JavaScript-%E8%AE%A1%E7%AE%97%E9%98%B6%E4%B9%98-%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%BD%92/</id>
    <published>2021-08-18T10:13:39.000Z</published>
    <updated>2021-09-17T10:37:40.657Z</updated>
    
    <content type="html"><![CDATA[<p>不畏惧失败是创造力的一个基本要素。——&lt;艾尔文·兰德博士&gt;</p><h2><span id="介绍">介绍</span></h2><p><strong>一个数</strong>的<strong>阶乘</strong>是该整数与所有小于或等于它的正整数的乘积。它必须是一个正整数 - 否则，逻辑会扩展到负无穷大。换句话说 - 计算阶乘意味着将数字和 1 之间的所有整数相乘。</p><blockquote><p><strong>0！按照惯例等于 1，并且不遵循标准规则</strong><br>阶乘由我们计算阶乘的整数表示，后跟感叹号。<br><strong>3！表示阶乘的3</strong><br>为了计算阶乘，我们将数字乘以每个小于它的整数，直到达到 1：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>! = <span class="number">4</span> * <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span></span><br><span class="line"><span class="number">4</span>! = <span class="number">24</span></span><br></pre></td></tr></table></figure><p>本教程中，将学习如何使用 <code>JavaScript</code> 使用循环和递归计算整数的阶乘。</p><h2><span id="使用循环计算">使用循环计算</span></h2><p>我们可以同时使用 <code>while</code> 循环和 <code>for</code> 循环来计算阶乘。通常只需要一个用于循环终止的计数器和我们正在计算阶乘的提供的数字。</p><p>使用 <code>for</code> 循环计算阶乘</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFactorialForLoop</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            result = result * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"n 必须是正数"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从数学上讲，这些是等效的陈述：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> * <span class="number">2</span> * <span class="number">3</span> * <span class="number">4</span> ... * n = n * (n<span class="number">-1</span>) * (n<span class="number">-2</span>) * (n<span class="number">-3</span>) * (n<span class="number">-4</span>) ... * (n - (n- <span class="number">1</span>))</span><br></pre></td></tr></table></figure><blockquote><p><strong>为简化起见，(n - (n-1))将始终等于1。</strong><br>演示</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inp = <span class="built_in">window</span>.prompt(<span class="string">"Enter a number: "</span>);</span><br><span class="line">inp = <span class="built_in">parseInt</span>(inp);</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"The result is: "</span> + getFactorialForLoop(inp));</span><br><span class="line"><span class="comment">// 4！是4 * 3 * 2 * 1，结果为24。</span></span><br></pre></td></tr></table></figure><p>使用 <code>while</code> 循环计算阶乘</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFactorialWhileLoop</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        result = result * n;</span><br><span class="line">        n -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 <code>for</code> 循环非常相似。除了这一次我们从移动 <code>n</code> 向 <code>1</code>  -更接近于数学上的定义。让我们测试一下我们的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inp = <span class="built_in">window</span>.prompt(<span class="string">"Enter a number: "</span>);</span><br><span class="line">inp = <span class="built_in">parseInt</span>(inp);</span><br><span class="line">alert(<span class="string">"The result is: "</span> + getFactorialWhileLoop(inp));</span><br></pre></td></tr></table></figure><h2><span id="使用递归计算">使用递归计算</span></h2><p>递归函数是调用自身的函数。乍一听可能有点吓人，但请耐心等待，您会发现递归函数很容易理解。</p><p>一般来说，每个递归函数都有两个主要组成部分：<strong>基本情况和递归步骤。</strong></p><p>基本案例是问题的最小实例 - 这就是重复的内容。也是一个中断，一个将返回一个值并退出递归的情况。就阶乘函数而言，基本情况是我们返回阶乘的最后一个元素，即<code>1</code>。</p><blockquote><p><strong>如果没有基本情况或不正确的基本情况，您的递归函数可能会无限运行，从而导致溢出。</strong></p></blockquote><p>递归步骤——顾名思义——是函数的递归部分，在这里整个问题被转化为更小的问题。如果递归步骤未能缩小问题，那么递归可以无限运行。</p><p>考虑阶乘的重复部分：</p><ul><li>**5！**是 <code>5 * 4 * 3 * 2 * 1</code>。<br>// 也知道：</li><li><code>4 * 3 * 2 * 1</code> 是 <strong>4！</strong>.</li></ul><p>换句话说，<code>5</code>！是 <code>5 * 4!</code>，和 <code>4！</code>是 <code>4 * 3!</code> 等等。</p><p>所以我们可以这么说 <code>n! = n * (n-1)!</code>。<strong>这将是我们阶乘的递归步骤！</strong></p><p>阶乘递归在达到 <code>1</code> 时结束。这将是我们的基本情况。<code>1</code> 如果 <code>n</code> 是 <code>1</code> 或更少，我们将返回，覆盖零输入。</p><p>递归阶乘函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFactorialRecursively</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * getFactorialRecursively(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如您所见，<code>if</code>块体现了我们的基本情况，而 <code>else</code>块则涵盖了递归步骤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inp = <span class="built_in">window</span>.prompt(<span class="string">"Enter a number: "</span>);</span><br><span class="line">inp = <span class="built_in">parseInt</span>(inp);</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"The result is: "</span> + getFactorialRecursively(inp));</span><br></pre></td></tr></table></figure><p>我们得到相同的结果。但这一次，引擎盖下的内容相当有趣：</p><p>你看，当我们输入输入时，函数会检查<code>if</code>块，由于 <code>3</code> 大于 <code>1</code>，它会跳到 <code>else</code> 块。在这个块中，我们看到了一行<code>return n * getFactorialRecursively(n-1);</code>。</p><blockquote><p><strong>我们暂时知道<code>n</code>的当前值，它是3，但getFactorialRecursively(n-1)仍有待计算。</strong></p></blockquote><p>然后程序再次调用同一个函数，但这次我们的函数以 <code>2</code> 作为参数。它检查 <code>if</code> 块并跳到 <code>else</code> 块并再次遇到最后一行。现在，<code>n</code>的当前值<code>2</code><br>但程序仍然计算 <code>getFactorialRecursively(n-1)</code>.</p><p>因此它再次调用该函数，但这次是 <code>if</code> 块，或者更确切地说，基类成功返回 <code>1</code> 并从递归中跳出。</p><p>遵循相同的模式向上，它返回每个函数结果，将当前结果与前一个结果相乘，<code>n</code> 并为前一个函数调用返回它。换句话说，我们的程序首先到达阶乘的底部（即 <code>1</code>），然后向上构建，同时在每一步进行乘法运算。</p><p>也将函数从调用栈中一一移除，直到 <code>n * (n-1)</code> 返回最终结果。</p><p>这通常是递归函数的工作方式。一些更复杂的问题可能需要包含多个基本情况或多个递归步骤的更深层次的递归。但就目前而言，这个简单的递归足以解决我们的阶乘问题！</p><h2><span id="总结">总结</span></h2><p>在本文中，我们介绍了如何使用 <code>for</code> 和 <code>while</code> 循环计算阶乘。我们还学习了 <strong>递归</strong> 是什么，以及如何使用递归计算阶乘。</p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/calculate-factorial-with-javascript-iterative-and-recursive/" target="_blank" rel="noopener">https://stackabuse.com/calculate-factorial-with-javascript-iterative-and-recursive/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不畏惧失败是创造力的一个基本要素。——&amp;lt;艾尔文·兰德博士&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;一个数&lt;/strong&gt;的&lt;strong&gt;阶乘&lt;/strong&gt;是该整数与所有小于或等于它的正整数的乘积。
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 集合入门</title>
    <link href="https://cl9000.github.io/2021/08/12/JavaScript-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/"/>
    <id>https://cl9000.github.io/2021/08/12/JavaScript-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/</id>
    <published>2021-08-12T13:48:12.000Z</published>
    <updated>2021-09-16T10:29:09.098Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="介绍">介绍</span></h2><p>不同形式的数据组是大多数编程语言中的基本数据结构之一。在许多情况下，<strong>通过不同数据类型表示的数据组被称为集合</strong>。</p><p>在本指南中 - 我们将看看 <code>JavaScript</code> 中的集合以及何时使用哪种类型的集合。我们将研究的三个主要集合组是：</p><ul><li>索引集合</li><li>键控集合</li><li>DOM 集合</li></ul><h2><span id="索引集合">索引集合</span></h2><p>一个索引集是该数据的集合，通过它们的索引中。<code>JavaScript</code> 集合索引是从0开始的，这意味着它们从 开始0，而不是1一直到n-1，n即集合中对象的数量。<code>JavaScript</code> 有两种索引集合 <code>Arrays</code> 和 <code>TypedArrays</code>。</p><h2><span id="数组对象">数组对象</span></h2><p><code>Array JavaScript</code> 中的对象是一个有序列表，可以使用索引访问其元素。<code>Array</code> 在 <code>JavaScript</code> 中有多种创建对象的方法，并且在底层没有太大区别:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray1 = [x1, x2, ... , xN];</span><br><span class="line"><span class="keyword">let</span> myArray2 = <span class="keyword">new</span> <span class="built_in">Array</span>(x1, x2, ... , xN);</span><br><span class="line"><span class="keyword">let</span> myArray3 = <span class="built_in">Array</span>(x1, x2, ... , xN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray = [<span class="string">"one"</span>, <span class="number">1</span>, <span class="string">"two"</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 0    1   23 --&gt; index values</span></span><br></pre></td></tr></table></figure><p>更改长度将更改数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="string">"one"</span>, <span class="number">1</span>, <span class="string">"two"</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myArray);</span><br><span class="line"></span><br><span class="line">myArray.length = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myArray);</span><br><span class="line"></span><br><span class="line">myArray.length = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myArray);</span><br><span class="line"><span class="comment">// ["one", 1, "two", 2]</span></span><br><span class="line"><span class="comment">// ["one", 1, "two", 2, undefined]</span></span><br><span class="line"><span class="comment">// ["one"]</span></span><br></pre></td></tr></table></figure><p>在 <code>JavaScript</code> 中，您可以创建一个没有任何元素但有一定长度的数组。您可以将其视为提前分配（保留）内存。当我们通过将数组更改 <code>length</code> 为比以前更大来扩展数组时，这正是发生的事情。</p><p>由于有三种方法可以创建一个充满元素的数组，因此也有三种方法可以创建具有分配内存的空数组，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>); <span class="comment">// creates an array with 4 empty spaces</span></span><br><span class="line"><span class="built_in">console</span>.log(myArray1.length); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray2 = <span class="built_in">Array</span>(<span class="number">4</span>); <span class="comment">// similar to the previous one, just without the keyword new</span></span><br><span class="line"><span class="built_in">console</span>.log(myArray2.length); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray3 = [];</span><br><span class="line">myArray3.length = <span class="number">4</span> <span class="comment">// this one is a bit different, we assign the value to the property length</span></span><br><span class="line"><span class="built_in">console</span>.log(myArray3.length); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2><span id="向数组添加元素">向数组添加元素</span></h2><p>我们已经看到了如何创建一个 <code>Array</code>，无论是空的还是非空的。现在让我们看看如何向它添加新元素。由于我们正在使用索引集合，因此我们将使用索引进行操作。</p><p>由于我们已经创建了4个空元素，让我们使用它。要添加一个元素，我们所要做的就是通过它的索引访问该元素并为其分配一个值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">myArray1[<span class="number">0</span>] = <span class="string">"one"</span></span><br><span class="line">myArray1[<span class="number">1</span>] = <span class="string">"two"</span></span><br><span class="line">myArray1[<span class="number">2</span>] = <span class="string">"three"</span></span><br><span class="line">myArray1[<span class="number">3</span>] = <span class="string">"four"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myArray)</span><br><span class="line"><span class="comment">// Output: ['one', 'two', 'three', 'four']</span></span><br><span class="line">myArray1[<span class="number">4</span>] = <span class="string">"five"</span></span><br><span class="line">myArray1[<span class="number">5</span>] = <span class="string">"six"</span></span><br><span class="line"><span class="built_in">console</span>.log(myArray) <span class="comment">// Output: ['one', 'two', 'three', 'four', 'five', 'six']</span></span><br></pre></td></tr></table></figure><p>我们可以使用 <code>for</code> 循环或 <code>forEach</code> 循环轻松地遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Traditional for loop:'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myArray1.length ; i++) &#123;</span><br><span class="line">true<span class="built_in">console</span>.log(myArray1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Functional forEach loop:'</span>)</span><br><span class="line">myArray1.forEach( <span class="function"><span class="keyword">function</span> (<span class="params">element</span>)</span>&#123; <span class="built_in">console</span>.log(element);&#125;);</span><br><span class="line"><span class="comment">// Output: </span></span><br><span class="line"><span class="comment">// Traditional for loop:</span></span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"><span class="comment">// four</span></span><br><span class="line"><span class="comment">// five</span></span><br><span class="line"><span class="comment">// six</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Functional forEach loop:</span></span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"><span class="comment">// four</span></span><br><span class="line"><span class="comment">// five</span></span><br><span class="line"><span class="comment">// six</span></span><br></pre></td></tr></table></figure><h2><span id="数组方法">数组方法</span></h2><ul><li><code>push()</code> - 在数组末尾添加一个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">myArray.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">// outputs [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><ul><li><code>pop()</code> - 删除数组的最后一个元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">myArray.pop();</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">// outputs [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li><code>concat()</code> - 将数组（两个或更多）连接到一个数组中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Concating 2 arrayslet myArray1 = [1,2,3]</span></span><br><span class="line"><span class="keyword">let</span> myArray2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> finalArray1 = myArray1.concat(myArray2);</span><br><span class="line"><span class="built_in">console</span>.log(finalArray1); <span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// Concating 3 arrayslet </span></span><br><span class="line">myArray3 = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> finalArray2 = myArray1.concat(myArray2, myArray3);</span><br><span class="line"><span class="built_in">console</span>.log(finalArray2); <span class="comment">// [1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure><ul><li><code>join(delimiter)</code> - 将所有元素连接成一个字符串，用分隔符 <code>delimiter</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="string">"Earth"</span>, <span class="string">"Wind"</span>, <span class="string">"Fire"</span>];</span><br><span class="line"><span class="keyword">let</span> arrayString = myArray.join(<span class="string">","</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arrayString); <span class="comment">// outputs Earth, Wind, Fire</span></span><br><span class="line"><span class="comment">// Bonus example</span></span><br><span class="line"><span class="built_in">console</span>.log(arrayString + <span class="string">"- September"</span>); <span class="comment">// outputs Earth, Wind, Fire - September</span></span><br></pre></td></tr></table></figure><ul><li><code>reverse()</code> - 颠倒数组中元素的顺序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> reversed = myArray.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(reversed); <span class="comment">// [3,2,1]</span></span><br><span class="line">slice(start, end)- 复制数组的一部分，从索引start开始到索引end<span class="number">-1</span></span><br><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">myArray = myArray.slice(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">// [4,5]</span></span><br></pre></td></tr></table></figure><h2><span id="typedarray-对象">TypedArray 对象</span></h2><p><code>Array</code> 对象非常适合处理 <code>JavaScript</code> 中的任何数据类型，因为它可以在一个数组中存储不同类型的元素，并且拥有强大的方法来操作这些元素。</p><p>然而，当需要处理原始二进制数据时——这就是 <code>TypedArray</code> 对象发挥作用的时候。例如，在处理音频和视频时处理原始数据。</p><h3><span id="typedarray对象的架构">TypedArray对象的架构</span></h3><p>JavaScript 类型数组分为buffers和views。甲缓冲器是只存储数据的块的对象，没有方法来访问或操纵该数据。为了实现这一点，您必须使用视图——它提供了一个上下文，一种将数据转换为TypedArray.</p><p>甲缓冲通过一个实现ArrayBuffer对象。它用于表示固定长度的二进制数据缓冲区。为了表示这个缓冲区，我们必须创建一个视图DataView——它以选定的格式表示那个缓冲区。有多种类型的视图，代表最常见的数字类型：</p><ul><li><code>Int8Array</code> - 值范围 [-128, 127]</li><li><code>UInt8Array</code>- 取值范围 [0, 255]，u 代表无符号</li><li><code>Int16Array</code> - 值范围 [-32768, 32767]</li><li><code>UInt16Array</code> - 值范围 [0, 65535]</li><li><code>Float32Array</code> - 数值范围 [1.2E-38, 3.4E38]</li></ul><h3><span id="创建一个typedarray">创建一个TypedArray</span></h3><p>在创建 <code>TypedArray</code>某种类型的对象时，我们实现了我们之前所说的——创建缓冲区和视图。<code>TypedArray</code>对象没有显式构造函数——没有 <code>new TypedArray()</code>语法——我们直接实例化我们需要的数组类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tArray = <span class="keyword">new</span> <span class="built_in">Int8Array</span>(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// 在这里，我们为 a 创建了一个缓冲区和一个Int8Array8 字节大小的视图。给元素赋值与Array对象相同：</span></span><br><span class="line"></span><br><span class="line">tArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(tArray);</span><br><span class="line"><span class="comment">// Int8Array [ 10, 0, 0, 0, 0, 0, 0, 0 ]</span></span><br></pre></td></tr></table></figure><h2><span id="键控">键控</span></h2><p>一个<strong>键控集</strong>是在表示的数据的集合<code>键值</code>符号。元素的值通过它们各自的键来访问和操作。</p><blockquote><p>在 <code>JavaScript</code> 中，有两种类型的键控集合：<code>Map</code> 和 <code>Set</code>.</p></blockquote><h2><span id="map-对象">Map 对象</span></h2><p><code>Map</code> 在 <code>JavaScript</code> 对象是含有一个标准的 <code>Mqp</code> 键-值对。要创建一个新<code>Map</code>对象，我们只需调用构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">myMap.set(<span class="string">"one"</span>, <span class="number">1</span>);</span><br><span class="line">myMap.set(<span class="string">"two"</span>, <span class="number">2</span>);</span><br><span class="line">myMap.set(<span class="string">"three"</span>, <span class="string">"three"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myMap);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span> &#123; <span class="string">'one'</span> =&gt; <span class="number">1</span>, <span class="string">'two'</span> =&gt; <span class="number">2</span>, <span class="string">'three'</span> =&gt; <span class="string">'three'</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(myMap.get(<span class="string">"two"</span>)); <span class="comment">// Output: 2</span></span><br><span class="line"><span class="comment">// get(key_name)在不存在的 key上调用该方法，则返回值也是undefined</span></span><br></pre></td></tr></table></figure><h3><span id="map方法">Map方法</span></h3><p>常用的方法：</p><ul><li><code>set(key_name, value)</code> - 将键值对添加到 <code>Map</code>.</li><li><code>get(key_name)</code> - 返回分配给传递的键的值，如果没有这样的键 - 返回<code>undefined</code>。</li><li><code>has(key_name)</code> - 返回 <code>true</code> 或 <code>false</code> 取决于 <code>Map</code> 是否有键<code>key_name</code>：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myMap.has(<span class="string">"two"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(myMap.has(<span class="string">"five"</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><code>delete(key_name)</code> - 根据传递的键和值删除键和值 <code>key_name</code> ，如果传递的是不存在的键 - 没有任何反应：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myMap.delete(<span class="string">"two"</span>)<span class="built_in">console</span>.log(myMap);  </span><br><span class="line"><span class="comment">// Output: Map &#123; 'one' =&gt; 1, 'three' =&gt; 'three' &#125;</span></span><br><span class="line">myMap.delete(<span class="string">"five"</span>)<span class="built_in">console</span>.log(myMap); </span><br><span class="line"><span class="comment">// Output: Map &#123; 'one' =&gt; 1, 'three' =&gt; 'three' &#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>clear()</code>- 从<code>Map</code>对象中删除每个键值对：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myMap.clear();</span><br><span class="line"><span class="built_in">console</span>.log(myMap); </span><br><span class="line"><span class="comment">// Output: Map &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>有一个主要的属性 <code>Map</code>——它的size属性。它包含一个表示 <code>Map</code> 对象大小的数值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">myMap.set(<span class="string">"one"</span>, <span class="number">1</span>);</span><br><span class="line">myMap.set(<span class="string">"two"</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myMap.size); </span><br><span class="line"><span class="comment">// Output: 2</span></span><br></pre></td></tr></table></figure><h3><span id="遍历-map">遍历 Map</span></h3><p><code>Map</code> 在 <code>JavaScript</code> 中遍历对象有点 <code>Python</code> 风格。我们可以使用 <code>for..of</code> 语法来实现这一点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> myMap)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k + <span class="string">" written in number is "</span> + v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// one written in number is 1</span></span><br><span class="line"><span class="comment">// two written in number is 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach()方法：</span></span><br><span class="line">myMap.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="built_in">console</span>.log(value);&#125;);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// three</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时检索value和key：</span></span><br><span class="line">myMap.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key</span>) </span>&#123; <span class="built_in">console</span>.log(value, key);&#125;);</span><br><span class="line"><span class="comment">// 1 one</span></span><br><span class="line"><span class="comment">// 2 two</span></span><br><span class="line"><span class="comment">// three three</span></span><br></pre></td></tr></table></figure><h3><span id="weakmap对象">WeakMap对象</span></h3><p><code>WeakMap</code> 与 <code>Map</code> 的 <code>API</code> 相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> athlete = <span class="class"><span class="keyword">class</span> <span class="title">Athlete</span></span>&#123;&#125;</span><br><span class="line">myMap.set(athlete, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myMap.get(athlete))</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2><span id="集合对象-set">集合对象 Set</span></h2><p>一个 <code>Set</code> 在 <code>JavaScript</code> 对象仅仅是值的集合。这些值是唯一的，这意味着不允许重复，并且尝试添加重复元素不会添加任何内容。</p><p>我们也可以测试这一点，因为打印集按插入顺序打印它们的元素，并且在开始和结束添加重复元素只会导致第一个出现。</p><p>创建 <code>Set</code>就像调用它的构造函数一样简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向集合添加新元素，使用add(value)方法。</span></span><br><span class="line">mySet.add(<span class="number">1</span>);</span><br><span class="line">mySet.add(<span class="string">"one"</span>);</span><br><span class="line">mySet.add(<span class="string">"one"</span>);</span><br><span class="line">mySet.add(<span class="string">"two"</span>);</span><br><span class="line">mySet.add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mySet);</span><br></pre></td></tr></table></figure><p>集合保持插入的顺序，所以我们可以很容易地测试新的是否1覆盖旧的1或者它的添加是否被简单地跳过：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span> &#123; <span class="number">1</span>, <span class="string">'one'</span>, <span class="string">'two'</span> &#125;</span><br></pre></td></tr></table></figure><h3><span id="set方法">Set方法</span></h3><ul><li><code>add(value)</code> - 为<code>Set</code>对象添加一个新值</li><li><code>delete(value)</code> - 删除 <code>value</code> 从 <code>Set</code>对象</li><li><code>has(value)</code> - 返回<code>true</code>或<code>false</code>取决于<code>value</code>是否在<code>Set</code>对象中</li><li><code>clear()</code> - 从<code>Set</code>对象中删除所有值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add values</span></span><br><span class="line">mySet.add(<span class="number">1</span>);</span><br><span class="line">mySet.add(<span class="string">"two"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete a value</span></span><br><span class="line">mySet.delete(<span class="string">"two"</span>)</span><br><span class="line"><span class="comment">// Check if the deleted value is present</span></span><br><span class="line"><span class="built_in">console</span>.log(mySet.has(<span class="string">"two"</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// Clear all values</span></span><br><span class="line">mySet.clear()</span><br><span class="line"><span class="comment">// Check if first value is present</span></span><br><span class="line"><span class="built_in">console</span>.log(mySet.has(<span class="number">1</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3><span id="weakset">WeakSet</span></h3><p>一个<code>WeakSet</code>对象是一个对象的集合。与<code>Set</code>的值相同，<code>WeakSet</code>的对象必须是唯一的。这是指内存中的对象，而不是它们的字段或值。</p><p><code>Set</code>和 <code>WeakSet</code>之间有一些主要区别：</p><ul><li><code>WeakSet</code> 是 <code>objects</code> 的集合，而 <code>Set</code> 是任何类型的值的集合。</li><li>与 <code>WeakMap</code> 相同，如果没有对 <code>WeakSet</code>对象的引用- 它被删除。</li></ul><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/getting-started-with-collections-in-javascript/" target="_blank" rel="noopener">https://stackabuse.com/getting-started-with-collections-in-javascript/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;不同形式的数据组是大多数编程语言中的基本数据结构之一。在许多情况下，&lt;strong&gt;通过不同数据类型表示的数据组被称为集合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在本指南中 - 我们将看看 &lt;code&gt;JavaS
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="集合" scheme="https://cl9000.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 正则表达式 和 匹配字符串</title>
    <link href="https://cl9000.github.io/2021/08/10/JavaScript%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://cl9000.github.io/2021/08/10/JavaScript%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-08-10T10:08:28.000Z</published>
    <updated>2021-09-12T14:20:14.488Z</updated>
    
    <content type="html"><![CDATA[<p>创造性就是发明、实验、成长、冒险、犯规、犯错和享受乐趣。 ——&lt;玛丽·卢·库克&gt;</p><h2><span id="介绍">介绍</span></h2><p>匹配字符串或字符串模式，在最常见的情况下，您需要这些来验证电子邮件、用户输入、文件名或大多数类型的输入字符串。虽然有许多模式匹配库和方法 - 一种久经考验的方法是使用正则表达式来定义一组规则，某个字符串必须遵循以匹配该模式。</p><p>在 <code>JavaScript</code> 中，<code>RegExp</code>类用于表示正则表达式，并且可以与一些使匹配模式更容易的方法结合使用。<br>显然，使用这些的先决条件是正则表达式的知识。如果您不习惯编写它们，您可以随时使用 <code>RegEx</code> 测试网站，<br>例如 <a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a><br>或 <a href="https://regexr.com/" target="_blank" rel="noopener">https://regexr.com/</a> - 它们直观地显示您的表达式对给定字符串的影响。</p><blockquote><p>本文中，将研究 <code>JavaScript</code> 中的<code>正则表达式</code>、<code>RegExp()类</code>的用法以及<code>exec()</code>和<code>test()</code>方法。</p></blockquote><p>先来看一些与实现的方法 <code>String</code> 的对象- <code>match()</code>，<code>search()</code> 并且 <code>replace()</code> ，正则表达式 <code>RegEx类</code> 可作为一个较短的替代使用。</p><h2><span id="什么是正则表达式">什么是正则表达式？</span></h2><p>在我们深入研究用于使用 <code>RegEx</code> 的 <code>JavaScript API</code> 之前，让我们先来看看正则表达式本身。</p><p><strong>正则表达式</strong>（缩写正则表达式）是用来匹配字符串或字符的不同组合的字符的图案。您需要遵循某些规则才能形成正确的正则表达式。示例：</p><ul><li><code>[abc]</code> - 匹配单个字符：a、b 或 c</li><li><code>[^abc]</code> - 匹配除a、b 或 c之外的所有字符</li><li><code>[a-z]</code> - 匹配范围 az中的任何字符</li><li><code>\s</code> - 匹配任何空白字符</li><li><code>\w</code> - 匹配任何单词字符</li></ul><p>这些是一些基本的，但它们更常用。正则表达式也支持运算符：</p><ul><li><code>a?</code> - 运算符 <code>?</code> 匹配零个或一个字符 <code>a</code></li><li><code>a*</code> - 运算符 <code>*</code> 匹配零个或多个字符 <code>a</code></li><li><code>a+</code> - 运算符 <code>+</code> 匹配一个或多个字符 <code>a</code></li><li><code>a{n}</code> - 运算符 <code>{n}</code> 精确匹配 <code>n</code> 个字符 <code>a</code>，例如，<code>'o{2}'</code> 不能匹配 <code>&quot;Bob&quot;</code>中的 <code>'o'</code>，但是能匹配 <code>&quot;food&quot;</code> 中的两个 <code>o</code></li><li><code>a{n, m}</code> - 运算符 <code>{n, m}</code> 匹配字符 <code>a</code>, 最少匹配 <code>n</code> 次且最多匹配 <code>m</code> 次，例如，<code>&quot;o{1,3}&quot;</code> 将匹配 <code>&quot;fooooood&quot;</code> 中的前三个 <code>o</code></li><li><code>\.</code> - 操作符 <code>\</code> 对字符 <code>.</code> 进行转义，这意味着字符 <code>.</code> 将没有其通常的含义 - 匹配任何字符串 - 但将作为字符匹配.</li></ul><p>编写一个正则表达式来检查字符串是否包含 <code>@gmail.com</code> 在字符串的末尾并 <code>a</code> 在 <code>@</code> 符号之前包含三个字符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"\w+a&#123;3&#125;@gmail\.com"</span></span><br><span class="line"><span class="comment">// \w - 匹配任何字符</span></span><br><span class="line"><span class="comment">// a&#123;3&#125;-连续匹配三个字符a</span></span><br><span class="line"><span class="comment">// @gmail\.com- 匹配文字字符串"@gmail.com"，同时.使用\运算符转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以匹配字符串，例如：</span></span><br><span class="line"><span class="comment">// otherEmailaaa@gmail.com</span></span><br><span class="line"><span class="comment">// caaa@gmail.com</span></span><br><span class="line"><span class="comment">// 而非</span></span><br><span class="line"><span class="comment">// aaaSomeEmail@gmail.com</span></span><br><span class="line"><span class="comment">// aaa@gmail.com</span></span><br><span class="line"><span class="comment">// aaa@yahoo.com</span></span><br></pre></td></tr></table></figure><h2><span id="regexp-类">RegExp 类</span></h2><p>在 <code>JavaScript</code> 中，有两种创建正则表达式的方法：</p><ol><li>使用 <code>RegEx</code> 字面量，这是一种放置在 <code>/</code> 字符之间的模式：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="string">"/[abc]+/"</span>;</span><br><span class="line"><span class="comment">// 如果 `RegEx` 在整个脚本中保持不变，应该使用这种方法，因为 `RegEx` 在脚本自动加载时被编译。</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>RegExp()</code> 构造函数：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[abc]+"</span>);</span><br><span class="line"><span class="comment">// 当 `RegEx` 是动态的并且可以在脚本的整个生命周期中更改时，这种方法是首选。它是在运行时编译的，而不是加载时</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：从 <code>ES6</code> 开始，您还可以将 <code>RegEx</code> 作为构造函数的参数传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/[abc]+/</span>);</span><br></pre></td></tr></table></figure><p>使用 <code>RegExp</code> 时，还可以传递标志 - 具有含义的字符 - 改变模式匹配的方式。其中一些标志是：</p><ul><li><code>i</code> - 表示不区分大小写，所以 <code>A</code> 和 <code>a</code> 匹配时相同</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Matches both ABC and abc one or more times</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[abc]+"</span>, <span class="string">"i"</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>g</code> - 表示将匹配所有可能的情况，而不仅仅是遇到的第一个</p></li><li><p><code>m</code> - 表示多行模式，允许模式与多行写入的字符串匹配</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">`</span></span><br><span class="line"><span class="string">This string can also be matched with</span></span><br><span class="line"><span class="string">Even though it's written in multiple lines</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p><code>RegExp()</code>构造仅用于生成图案进行测试。但是，它包含两种方法可以测试模式并在适合时进行匹配：<code>exec()</code> 和 <code>test()</code>。</p><h2><span id="exec-函数">exec() 函数</span></h2><p><code>exec()</code> 函数在字符串中执行搜索。如果有匹配项，则返回一个包含匹配项信息的数组，否则返回 <code>null</code>。</p><p>例如检查电子邮件是否以域名结尾 <code>@gmail.com</code> 并包含三个连续的 <code>a</code> 字符 <code>@gmail</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不区分大小写</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\w+a&#123;3&#125;@gmail\.com/</span>, <span class="string">"i"</span>);</span><br><span class="line"><span class="keyword">let</span> result1 = regex.exec(<span class="string">"someEmailaaa@gmail.com"</span>);</span><br><span class="line"><span class="keyword">let</span> result2 = regex.exec(<span class="string">"sOmEEmAiLaAa@gmail.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"><span class="built_in">console</span>.log(result2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\w+a&#123;3&#125;@gmail\.com/</span>, <span class="string">"i"</span>);</span><br><span class="line"><span class="keyword">let</span> result1 = regex.exec(<span class="string">"someEmailaaa@gmail.com"</span>) ?? <span class="string">'No matched results'</span>;</span><br><span class="line"><span class="keyword">let</span> result2 = regex.exec(<span class="string">"sOmEEmAiLaAa@gmail.com"</span>) ?? <span class="string">'No matched results'</span>;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">'someEmailaaa@gmail.com'</span>,</span><br><span class="line">  index: <span class="number">0</span>,</span><br><span class="line">  input: <span class="string">'someEmailaaa@gmail.com'</span>,</span><br><span class="line">  groups: <span class="literal">undefined</span> ]</span><br><span class="line">  </span><br><span class="line">[ <span class="string">'sOmEEmAiLaAa@gmail.com'</span>,</span><br><span class="line">  index: <span class="number">0</span>,</span><br><span class="line">  input: <span class="string">'sOmEEmAiLaAa@gmail.com'</span>,</span><br><span class="line">  groups: <span class="literal">undefined</span> ]</span><br><span class="line"><span class="comment">// 匹配的字符串</span></span><br><span class="line"><span class="comment">// 匹配字符串开始的索引值</span></span><br><span class="line"><span class="comment">// 输入字符串</span></span><br><span class="line"><span class="comment">// 包含所有命名捕获组的对象的组属性- 在大多数情况下，这将是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只想隔离匹配的字符串而不需要额外的信息，您可以打印出</span></span><br><span class="line"><span class="built_in">console</span>.log(results[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><code>exec()</code>方法的一个有趣特性是它会记住它停止执行的字符的索引，所以基本上，你可以一次又一次地调用这个方法，直到你得到一个 <code>null</code></p><p>我们传递一个包含三个字符串的数组；其中两个会匹配，一个不会。为了得到多个结果，我们可以遍历数组并调用，<code>exec()</code>直到得到一个<code>null</code>. 另外，让我们创建一个空数组 <code>matchedStrings</code> 并将匹配的字符串推送给它。</p><p><strong>注意</strong>：您必须将 <code>g</code>标志传递给RegExp()构造函数才能获得所有结果，而不仅仅是第一个。这样，您将避免进入无限循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\w+a&#123;3&#125;@gmail\.com/</span>, <span class="string">"g"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">"someEmailaaa@gmail.com"</span>, <span class="string">"baaa@gmail.com"</span>, <span class="string">"baaa@yahoo.com"</span>];</span><br><span class="line"><span class="keyword">let</span> matchedStrings = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = regex.exec(strings);</span><br><span class="line"><span class="keyword">if</span>(result != <span class="literal">null</span>) &#123;</span><br><span class="line">    matchedStrings.push(result[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(result != <span class="literal">null</span>) &#123;</span><br><span class="line">    result = regex.exec(strings);</span><br><span class="line">    <span class="keyword">if</span>(result != <span class="literal">null</span>) &#123;</span><br><span class="line">        matchedStrings.push(result[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(matchedStrings);</span><br><span class="line"><span class="comment">// ["someEmailaaa@gmail.com", "baaa@gmail.com"]</span></span><br><span class="line"><span class="comment">// 可以看到我们从来没有跟踪数组中最后执行的字符串的索引，但exec()知道在哪里继续搜索</span></span><br></pre></td></tr></table></figure><h2><span id="test-函数">test() 函数</span></h2><p><code>test()</code>方法类似于 <code>exec()</code> 除了它不返回包含信息的数组，而是一个简单的 <code>true</code> 或 <code>false</code>. 它执行相同的搜索 <code>exec()</code>，如果模式与字符串匹配，则返回 <code>true</code>。否则，返回 <code>false</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\w+a&#123;3&#125;@gmail\.com/</span>, <span class="string">"i"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results = regex.test(<span class="string">"someEmailaaa@gmail.com"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(results); <span class="comment">// Output: true</span></span><br><span class="line"></span><br><span class="line">results = regex.test(<span class="string">"someEmailaaa@yahoo.com"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(results); <span class="comment">// Output: false</span></span><br></pre></td></tr></table></figure><p>对同一个字符串进行两次测试，将得到不同的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\w+a&#123;3&#125;@gmail\.com/</span>, <span class="string">"g"</span>); <span class="comment">// Remember the 'g' flag when working with multiple results</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> results = regex.test(<span class="string">"someEmailaaa@gmail.com"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(results); <span class="comment">// Output: true</span></span><br><span class="line"></span><br><span class="line">results = regex.test(<span class="string">"someEmailaaa@gmail.com"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(results); <span class="comment">// Output: false</span></span><br></pre></td></tr></table></figure><p><code>test()</code>字符串数组的用法与 相同 <code>exec()</code>，不同之处在于您将打印出 <code>true / false</code>。实际上，这并不常用，除非您要跟踪匹配字符串的数量。</p><h2><span id="match方法">match()方法</span></h2><p><code>match()</code> 方法是 <code>String</code> 我们将要研究的第一个方法 - 它适用于正则表达式。<br>它接受一个正则表达式作为参数并返回一个匹配数组，或者 <code>null</code>,如果没有，那么本质上 - 与实例的<code>exec()</code>方法大致相同的 <code>API RegEx</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\w+a&#123;3&#125;@gmail\.com/</span>, <span class="string">"g"</span>); <span class="comment">// Note the 'g' flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">"someEmailaaa@gmail.com"</span>;</span><br><span class="line"><span class="keyword">let</span> resultArray = string.match(regex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(resultArray); <span class="comment">// Output: [ 'someEmailaaa@gmail.com' ]</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：也可以在此处使用 <code>RegEx</code> 来缩短代码，因为 <code>RegEx</code> 无论如何都会编译为实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">"someEmailaaa@gmail.com"</span>;</span><br><span class="line"><span class="keyword">let</span> resultArray = string.match(<span class="regexp">/\w+a&#123;3&#125;@gmail\.com/</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(resultArray); <span class="comment">// Output: [ 'someEmailaaa@gmail.com' ]</span></span><br></pre></td></tr></table></figure><p>我们将 <code>RegEx</code> 更改为 <code>/[a-z]/</code> - 以仅匹配小写字符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/[a-z]/</span>, <span class="string">"g"</span>); <span class="comment">// Note the 'g' flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">"someEmailaaa@gmail.com"</span>;</span><br><span class="line"><span class="keyword">let</span> resultArray = string.match(regex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(resultArray);</span><br><span class="line"><span class="comment">// ["s","o","m","e","m","a","i","l","a","a","a","g","m","a","i","l","c","o","m"]</span></span><br></pre></td></tr></table></figure><h2><span id="search-方法">search() 方法</span></h2><p><code>search()</code> 方法搜索传递的模式和字符串之间的匹配项。如果找到匹配项，则返回其索引。否则，该方法返回-1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/\w+a&#123;3&#125;@gmail\.com/</span>, <span class="string">"g"</span>); <span class="comment">// Note the 'g' flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">"some string that isn't matched someEmailaaa@gmail.com"</span>;</span><br><span class="line"><span class="keyword">let</span> result = string.search(regex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// Output: 31</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">"It should return -1 with this string"</span>;</span><br><span class="line">result = string.search(regex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// Output: -1</span></span><br></pre></td></tr></table></figure><h2><span id="replace-方法">replace() 方法</span></h2><p><code>replace(to_replace, replace_with)</code> 方法返回一个新字符串，其中模式匹配 <code>to_replace</code> 被替换为 <code>replace_with</code>。</p><blockquote><p><strong>它不会更改原始字符串，因为字符串是不可变的。</strong><br><code>to_replace</code> 参数可以是一个字符串或一个 <code>RegExp</code> 实例。如果是字符串，则只会替换第一个出现的位置，而如果是 <code>RegExp</code>，则将替换每个出现的位置。<br>替换 <code>gmail.com</code> 为 <code>yahoo.com</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/gmail\.com/</span>, <span class="string">"g"</span>); <span class="comment">// Note the 'g' flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">"example@gmail.com"</span>;</span><br><span class="line"><span class="keyword">let</span> result = string.replace(regex, <span class="string">"yahoo.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// Output: example@yahoo.com</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">"example1@gmail.com example2@example.com"</span></span><br><span class="line">result = string.replace(regex, <span class="string">"yahoo.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// Output: example1@yahoo.com example2@yahoo.com</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(string); <span class="comment">// Output: example1@gmail.com example2@gmail.com</span></span><br></pre></td></tr></table></figure><h2><span id="总结">总结</span></h2><ul><li><code>RegExp</code>类 - 一个类，其目的是用来表示一个正则表达式</li><li><code>exec()</code>方法 - 其搜索字符串中的正则表达式，并返回匹配的阵列（具有附加信息）。</li><li><code>test()</code>方法 - 这只是如果有一个字符串并返回匹配测试<code>true/ false</code>。</li><li><code>match()</code>方法 - 在所定义的<code>String</code>，则返回匹配的阵列（没有附加信息）。</li><li><code>search()</code>方法 - 在已定义<code>String</code>，返回匹配的索引中找到。</li><li><code>replace()</code>方法 - 在已定义<code>String</code>，取代了<code>RegExp()</code>用一个字符串。</li></ul><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/guide-to-regular-expressions-and-matching-strings-in-javascript/" target="_blank" rel="noopener">https://stackabuse.com/guide-to-regular-expressions-and-matching-strings-in-javascript/</a></li><li><a href="https://regexr.com/" target="_blank" rel="noopener">https://regexr.com/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创造性就是发明、实验、成长、冒险、犯规、犯错和享受乐趣。 ——&amp;lt;玛丽·卢·库克&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;匹配字符串或字符串模式，在最常见的情况下，您需要这些来验证电子邮件、用户输入、文件名或大多数类型的输
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="正则" scheme="https://cl9000.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Node 检查文件或目录是否为空</title>
    <link href="https://cl9000.github.io/2021/06/29/JavaScript-Node%E6%A3%80%E6%9F%A5%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/"/>
    <id>https://cl9000.github.io/2021/06/29/JavaScript-Node%E6%A3%80%E6%9F%A5%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/</id>
    <published>2021-06-29T10:36:09.000Z</published>
    <updated>2021-09-09T14:30:11.366Z</updated>
    
    <content type="html"><![CDATA[<p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p><h2><span id="介绍">介绍</span></h2><p>Web 应用程序通常以某种形式接收用户输入- 对于任何输入，验证都很重要。确保表单字段包含有效数据，或者它们包含任何数据是您可以做的第一项检查。</p><p>当用户上传文件时 - 您需要检查这些文件是否为空，而不仅仅是它们是否存在。<br>此外，由于 Node 支持服务器端开发并且可以使用文件系统，您会发现自己一直在使用文件和目录，尤其是在创建 CLI 应用程序时。</p><p>在本指南中，我们将看看如何使用 <code>Node.js</code> 检查文件或目录是否为空。</p><p>注意：两方面查研究 - 从前端接收文件并对其进行验证，或者使用文件系统而不考虑可能不存在的前端。</p><h2><span id="检查是否使用-javascript-选择了文件">检查是否使用 JavaScript 选择了文件</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- Meta tags --&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form enctype="multipart/</span>form-data<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>file<span class="string">" name="</span>file<span class="string">" id="</span>file<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;button type="</span>submit<span class="string">" onclick="</span>checkFile()<span class="string">"&gt;Submit&lt;/button&gt;    </span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    &lt;script src="</span>script.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>页面包含一个<code>&lt;form&gt;</code>接受一个 <code>multipart</code> 文件，通过<code>&lt;input type=&quot;file&quot;&gt;</code>。按下按钮后，将<code>checkFile()</code>触发该功能，从导入的<code>script.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fileInputField = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fileInputField.files.length == <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">"Please select a file!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们获取我们的 <code>input</code>元素 <code>document.getElementById()</code>并检查files属性的长度，它的 <code>input</code>类型<code>file</code>为。如果它是空的，我们会提醒用户没有选择文件。</p><p>一旦我们确定用户提供了一个文件，我们就可以检查他们是否提供了一个非空文件。</p><h2><span id="fs的模块">fs的模块</span></h2><p>Node.js是一种 JavaScript 运行时环境，可以在浏览器之外执行 JavaScript 代码。这也使我们能够与底层操作系统和文件系统进行交互。fs在这种情况下，内置（文件系统）模块为我们创造了方法。</p><p>我们将依赖于 <code>fs.readFile()</code> 和 <code>fs.readdir()</code> 方法。</p><h2><span id="使用-nodejs-检查文件是否为空">使用 Node.js 检查文件是否为空</span></h2><p>一旦用户通过表单将文件发送到您的后端，例如发送到/upload端点，就该检查文件是否为空。</p><p>最简单的检查方法是流式传输文件中的数据并检查其长度。如果文件中有0 个字节，或者更确切地说，如果length数据的 等于0，则文件为空：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/upload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">true<span class="keyword">const</span> multiparty = <span class="built_in">require</span>(<span class="string">'multiparty'</span>);</span><br><span class="line">true<span class="keyword">let</span> form = <span class="keyword">new</span> multiparty.Form();</span><br><span class="line">trueform.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">err, fields, files</span>) </span>&#123;</span><br><span class="line">truetrue<span class="keyword">let</span> file = files.keySelect[<span class="number">0</span>];</span><br><span class="line">truetruefs.readFile(file, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (data.length == <span class="number">0</span>) &#123;</span><br><span class="line">truetruetruetrue<span class="keyword">return</span> res.status(<span class="number">422</span>).json(&#123;<span class="attr">message</span> : <span class="string">"File is empty! Unprocessable Entity."</span>&#125;);</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;)</span><br><span class="line">true&#125;);</span><br><span class="line">true<span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123;<span class="attr">message</span>: <span class="string">"Success"</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果不处理表单提供的文件，并且已经记住了名称，则可以完全跳过此过程并直接读取文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">"myFile.txt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">true<span class="keyword">if</span> (data.length == <span class="number">0</span>) &#123;</span><br><span class="line">truetrue<span class="built_in">console</span>.log(<span class="string">"File is empty!"</span>);</span><br><span class="line">true&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetrue<span class="built_in">console</span>.log(<span class="string">"File is not empty!"</span>);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="使用-nodejs-检查目录是否为空">使用 Node.js 检查目录是否为空</span></h2><p>在检查目录是否为空时，我们可以使用以下 <code>readDir()</code> 方法：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(directoryName, <span class="function"><span class="keyword">function</span><span class="params">(err, data)</span> &#123;</span></span><br><span class="line">true<span class="keyword">if</span> (data.<span class="built_in">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">truetrueconsole.<span class="built_in">log</span>(<span class="string">"Directory is empty!"</span>);</span><br><span class="line">true&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">truetrueconsole.<span class="built_in">log</span>(<span class="string">"Directory is not empty!"</span>);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="结论">结论</span></h2><p>处理文件对于 Node 项目来说是司空见惯的，因为它旨在用于服务器端。您可以执行以验证文件的基本检查之一是检查它们是否为空。</p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/node-check-if-file-or-directory-is-empty/" target="_blank" rel="noopener">https://stackabuse.com/node-check-if-file-or-directory-is-empty/</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Web 应用程序通常以某种形式接收用户输入- 对于任何输入，验证都很重要。确保表单字段包含有效数据，或者它们包含任何数据是您
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="Node" scheme="https://cl9000.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 使用 Cypress 进行端到端测试</title>
    <link href="https://cl9000.github.io/2021/06/17/JavaScript-%E4%BD%BF%E7%94%A8-Cypress-%E8%BF%9B%E8%A1%8C%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%8B%E8%AF%95/"/>
    <id>https://cl9000.github.io/2021/06/17/JavaScript-%E4%BD%BF%E7%94%A8-Cypress-%E8%BF%9B%E8%A1%8C%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%8B%E8%AF%95/</id>
    <published>2021-06-17T10:16:25.000Z</published>
    <updated>2021-09-10T13:43:10.862Z</updated>
    
    <content type="html"><![CDATA[<p>预测未来最好的方法就是去创造未来。——&lt;亚伯拉罕·林肯&gt;</p><h2><span id="介绍">介绍</span></h2><p>端到端自动化测试是任何基于 Web 的应用程序开发生命周期的重要组成部分。</p><p>在本文中，我们将看看使用 <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress https://www.cypress.io/</a> 的端到端测试。</p><blockquote><p><strong>“端到端”测试是指模拟用户体验和用户与服务交互的过程，并测试该过程中是否存在任何错误。</strong></p></blockquote><h2><span id="使用-cypress-优缺点">使用 Cypress 优缺点</span></h2><h3><span id="优点">优点</span></h3><p>使用 Cypress 的最大优点很容易被 Cypress 的开发人员称为“时间旅行”。</p><p>它允许您在其命令日志和应用程序预览中查看测试中发生的所有事情，从而简化了调试过程。每一步都会显示应用程序在执行时的状态，让您可以在出现问题时精确定位问题。</p><p>我们将他们的认知感知的很大一部分建立在我们的视线上，而“时间旅行”使我们能够直观地（人为地）寻找错误，同时仍然给我们带来自动化的好处。</p><p>这也是一种非常自然的错误搜索方法，因为这是一个专注于端到端测试的框架，这意味着除了测试功能之外，我们实际上可以看到最终用户会看到什么。</p><p>您可能想要使用 Cypress 的其他一些原因是：</p><ul><li>它不是基于 <code>Selenium</code>，所以它不存在相同的问题并提供了一个新的视角。<code>Cypress</code> 是从头开始构建的。</li><li>高度关注端到端测试。</li><li>如果您可在浏览器中运行它，则可以使用 <code>Cypress</code> 对其进行测试。</li><li>您只需要学习 <code>JavaScript</code>。</li><li>设置超级简单，速度快如闪电。</li><li>它是在考虑到测试驱动开发的情况下创建的。</li><li>大量官方文档。</li><li>您可以看到从浏览器发出的每个网络请求，并可以访问所有数据。</li><li>您可以存根任何网络请求，同时还可以创建任何网络请求（这意味着您也可以使用 <code>Cypress</code> 进行 <code>API</code> 测试）。</li><li>积极和透明的<a href="https://github.com/cypress-io" target="_blank" rel="noopener">开发人员 https://github.com/cypress-io</a>。</li><li><code>Cypress</code> 建立在 <a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a> 和 <a href="https://www.chaijs.com/" target="_blank" rel="noopener">Chai</a> 之上，它们都是现代流行的 <code>BDD</code> 和 <code>TDD</code> 库，因此实际上借用了一些语法。如果您以前使用过这些，您会注意到 <code>Cypress</code> 钩子是直接从 <code>Mocha</code> 来的。</li></ul><h3><span id="不足">不足</span></h3><ul><li>由于它不使用 Selenium 并且基于 JavaScript，因此您需要具备 <code>JavaScript</code> 知识。<code>Selenium</code> 支持 <code>JavaScript、Java、Python、Ruby 和 C#</code>。</li><li>由于它非常专注于端到端测试，因此它不会成为您可以应用于所有其他类型测试（API 测试除外）的解决方案。</li><li>它不（也可能永远不会）支持所有浏览器（您可以在此处找到支持的浏览器列表）这可能是一个问题，因为某些类型的客户端可能会请求 IE、Opera 或 Safari 支持。</li><li>没有移动测试。</li><li>已知在使用直接 URL 导航时不稳定。</li><li>不能使用多个标签。</li><li>无法导航到不同的域 URL - 如果您的解决方案中有多个应用程序，或者您需要在第三方 UI 上测试某些内容，这可能是一个巨大的问题。您需要为其他应用程序保留一个单独的项目，或者完全依赖网络请求来获取数据。</li><li>相对较新，所以它没有像一些旧的测试工具那样多的社区材料。</li><li>对于您在应用程序中可能经常执行的某些操作，例如文件上传、悬停和滚动，某些路线图功能似乎已退居次要位置。您将不得不寻找解决方法。</li><li>如果您想要直接的数据库通信或直接浏览器工作之外的几乎任何事情，则需要进行大量工作。不过，他们正计划为其他语言发布后端适配器。本指南将在发布时及时更新。</li></ul><h2><span id="使用-cypress">使用 Cypress</span></h2><p><a href="https://github.com/cypress-io/cypress-example-kitchensink" target="_blank" rel="noopener">Cypress 官网参考例子 https://github.com/cypress-io/cypress-example-kitchensink</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 Cypress </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install cypress --save-dev</span></span><br></pre></td></tr></table></figure><p>使用演示应用程序，执行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## clone this repo to a local directory</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/&lt;your-username&gt;/cypress-example-kitchensink.git</span><br><span class="line"></span><br><span class="line"><span class="comment">## cd into the cloned repo</span></span><br><span class="line"><span class="built_in">cd</span> cypress-example-kitchensink</span><br><span class="line"></span><br><span class="line"><span class="comment">## install the node_modules</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">## start the local webserver</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## launch the cypress test runner</span></span><br><span class="line">npm run cy:open</span><br></pre></td></tr></table></figure><p>启动后如下：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/cypress1.png" alt><br>单击其中任何一个（例如 <code>todo.spec.js</code>）将启动：<br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/cypress2.png" alt></p><h2><span id="cypress-api-和-样式">Cypress API 和 样式</span></h2><ul><li><a href="https://docs.cypress.io/guides/overview/why-cypress/" target="_blank" rel="noopener">Cypress guides</a></li><li><a href="https://docs.cypress.io/api/table-of-contents" target="_blank" rel="noopener">Cypress API</a></li></ul><p><code>Cypress</code> 建立在 <code>Mocha</code> 和 <code>Chai</code> 之上，并借用了它们的一些语法和特性。<br>也就是说，最显着的借用元素是describe(), context(),it() specify()方法。它们本质上是用于用标签注释测试组的实际测试方法的包装器。</p><p>值得注意的是，<code>specify()</code> <code>it()</code> 是同义词，就像 <code>describe()</code> <code>context()</code>。根据听起来更自然的内容，您可以使用这些的任意组合。</p><p><code>describe()</code>用于为一组测试提供上下文，同时 <code>it()</code> 描述单个测试。通常，您会将它们嵌套在类似于以下的结构中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Element X Testing"</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">"Does Y"</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// Test...</span></span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"Does Z"</span>, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// Test...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在每个测试中，我们将依靠 <code>Cypress</code> 实例（<code>cy</code>）来运行各种方法，如<code>visit()，get()，fixture()</code>，等，以及链的方法对这些结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"Testing CRUD Form"</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">"Visits the addition page"</span>, () =&gt; &#123;</span><br><span class="line">        cy.visit(<span class="string">'/addProduct'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"Gets the input field and inputs text"</span>, () =&gt; &#123;</span><br><span class="line">        cy.get(<span class="string">'.input-element'</span>)</span><br><span class="line">          .type(<span class="string">'Product 1'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"Clicks the 'Add Product' button"</span>, () =&gt; &#123;</span><br><span class="line">        cy.contains(<span class="string">'Add Product'</span>)</span><br><span class="line">          .click();</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"Checks if X was added correctly"</span>, () =&gt; &#123;</span><br><span class="line">        cy.get(<span class="string">'product-title'</span>)</span><br><span class="line">          .should(<span class="string">'have.value'</span>, <span class="string">'Product 1'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"Runs a CLI Command"</span>, () =&gt; &#123;</span><br><span class="line">        cy.exec(<span class="string">'npm run other-service'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(<span class="string">"Sends POST HTTP request"</span>, () =&gt; &#123;</span><br><span class="line">        cy.request(<span class="string">'POST'</span>, <span class="string">'/host/other-service/updateCustomers'</span>, &#123; <span class="attr">mail</span>: <span class="string">'Product 1 is out!'</span> &#125;)</span><br><span class="line">          .its(<span class="string">'body'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后，当您准备好运行测试时，您可以运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cypress run --browser chrome</span><br></pre></td></tr></table></figure><h2><span id="将-cypress-添加到项目中">将 Cypress 添加到项目中</span></h2><p>配置文件，<code>cypress.json</code> 将在项目根目录中自动生成，默认情况下只包含项目 ID 的占位符：<br>配置 ( cypress.json) 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"projectId"</span>: <span class="string">"4b7344"</span>,</span><br><span class="line"><span class="string">"baseUrl"</span>: <span class="string">"http://localhost:8080"</span></span><br></pre></td></tr></table></figure><p>现在，让我们在 <code>/integration</code> 调用下创建一个新目录 <code>my_tests</code> 和一个名为 <code>tests.spec.js</code> . 您会注意到，在 <code>Cypress</code> 中，您已经会提示您选择运行这个新文件，因为它会响应性地扫描 <code>/integration</code> 目录以查找新测试。</p><p>继续在我们的tests.spec.js文件中定义几个测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* In general, it is a good practice to store </span></span><br><span class="line"><span class="comment"> all your selectors in variables, since they </span></span><br><span class="line"><span class="comment"> might change in the future */</span></span><br><span class="line"><span class="keyword">var</span> email;</span><br><span class="line"><span class="keyword">var</span> emailSelector = <span class="string">'.action-email'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Email Input'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">/* beforeEach() which will run before every </span></span><br><span class="line"><span class="comment">    it() test in the file. This is great </span></span><br><span class="line"><span class="comment">    if you want to perform some common actions </span></span><br><span class="line"><span class="comment">    before each test */</span></span><br><span class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/* Since we defined `baseUrl` in cypress.json,</span></span><br><span class="line"><span class="comment">        using `/` as the value in `cy.visit()` will navigate to it.</span></span><br><span class="line"><span class="comment">        Adding `commads/actions` will add the value to the `baseUrl`. */</span></span><br><span class="line">        cy.visit(<span class="string">'/commands/actions'</span>);</span><br><span class="line">        <span class="comment">/* We are reading the example fixture file and assigning its</span></span><br><span class="line"><span class="comment">        value to a global variable so it is accessible in every test */</span></span><br><span class="line">        cy.fixture(<span class="string">'example'</span>).then(<span class="function">(<span class="params">json</span>)=&gt;</span>&#123;</span><br><span class="line">            email = json.email;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'Clicks on Actions, and writes the email from the fixture'</span>, () =&gt; &#123;</span><br><span class="line">        cy.get(emailSelector)</span><br><span class="line">            .type(email)</span><br><span class="line">            .should(<span class="string">'have.value'</span>, email);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="模拟-xhr-请求响应">模拟 XHR 请求响应</span></h2><p>另一个需要注意的非常有用的功能是，您可以完全跳过上一节中创建评论的过程。您可以通过使用 stub 这个网络请求来创建您自己的模拟响应cy.intercept()。这在后端尚未开发时很有用，因此您可以在完成之前模拟响应，或者您只想测试应用程序的这一部分。</p><p>我们这里也有夹具文件的另一个用途。让我们创建一个mock_comment.json包含评论模拟数据的调用，并添加以下 JSON 内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="string">"postId"</span>: <span class="number">1</span>,  </span><br><span class="line">  <span class="string">"id"</span>: <span class="number">1</span>,  </span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"My Name"</span>,  </span><br><span class="line">  <span class="string">"email"</span>: <span class="string">"MyEmail@gardner.biz"</span>,  </span><br><span class="line">  <span class="string">"body"</span>: <span class="string">"My Comment Body"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，让我们intercepting_requests.spec.js在/my_tests目录下创建另一个文件。在这里，我们将拦截相同的端点，但将我们的夹具作为响应注入，完全跳过实际请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">describe(<span class="string">'Intercepting XHR'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;       </span><br><span class="line">    <span class="comment">// By adding an object `&#123;fixture: 'mock_comment.json'&#125;` in the `intercept()` call,</span></span><br><span class="line">    <span class="comment">// we are telling cypress to use the JSON file as the response.      </span></span><br><span class="line">    <span class="comment">// It can also be aliased using `.as()`.  </span></span><br><span class="line">    cy.intercept(<span class="string">'GET'</span>, <span class="string">'**/comments/*'</span>,</span><br><span class="line">                 &#123;<span class="attr">fixture</span>: <span class="string">'mock_comment.json'</span>&#125;).as(<span class="string">'getComment'</span>);       </span><br><span class="line">    cy.navigateToAliasingPage();    </span><br><span class="line">  &#125;);        </span><br><span class="line">  it(<span class="string">'Clicks a button and expects a comment'</span>, () =&gt; &#123;        </span><br><span class="line">    cy.get(<span class="string">'.network-btn'</span>).click()        </span><br><span class="line">    <span class="comment">// There is no need to validate the response now since we mocked it,</span></span><br><span class="line">    <span class="comment">// but there is a need to validate the UI        </span></span><br><span class="line">    cy.fixture(<span class="string">'mock_comment'</span>).then(<span class="function">(<span class="params">json</span>)=&gt;</span>&#123;           </span><br><span class="line">      <span class="comment">// We are accessing the comment directly from `mock_comment.json`</span></span><br><span class="line">      <span class="comment">// and checking that the UI is displaying it in its fullest         </span></span><br><span class="line">      cy.get(<span class="string">'.network-comment'</span>).should(<span class="string">'have.text'</span>, json.body);        </span><br><span class="line">    &#125;);    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们运行这个测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cypress run --record --spec <span class="string">"cypress/integration/my_tests/intercepting_requests.spec.js"</span></span><br></pre></td></tr></table></figure><p>更多内容参考官网文档。</p><h2><span id="结论">结论</span></h2><p><code>Cypress</code> 是一个很棒的新兴测试工具。它是超级轻量级​​且易于设置的，并且对于 TDD 来说非常棒，它构建在 <code>Mocha</code> 和 <code>Chai</code> 之上。它允许您完全模拟您的后端，这也非常适合在与后端集成之前进行测试，或者在您的后端尚不存在的情况下。在某些情况下，它还可以帮助塑造后端，因为它将准确勾勒出前端的期望。</p><p>但是，如果您正在寻找一种可以覆盖的范围非常灵活的工具，并且您需要一个大型的、个性化的和定制的框架，那么您可能希望坚持使用 <code>Selenium</code>。</p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/end-to-end-testing-in-javascrpt-with-cypress/" target="_blank" rel="noopener">https://stackabuse.com/end-to-end-testing-in-javascrpt-with-cypress/</a></li><li><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress https://www.cypress.io/</a></li><li><a href="https://github.com/cypress-io/cypress-example-kitchensink" target="_blank" rel="noopener">https://github.com/cypress-io/cypress-example-kitchensink</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;预测未来最好的方法就是去创造未来。——&amp;lt;亚伯拉罕·林肯&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;端到端自动化测试是任何基于 Web 的应用程序开发生命周期的重要组成部分。&lt;/p&gt;
&lt;p&gt;在本文中，我们将看看使用 &lt;a h
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
      <category term="测试" scheme="https://cl9000.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中获取列表中的最后一个元素</title>
    <link href="https://cl9000.github.io/2021/06/08/Javascript%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0/"/>
    <id>https://cl9000.github.io/2021/06/08/Javascript%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0/</id>
    <published>2021-06-08T10:08:50.000Z</published>
    <updated>2021-06-08T10:26:54.943Z</updated>
    
    <content type="html"><![CDATA[<p>万物皆有其美，但并非人人都能发现。——&lt;安迪.沃霍尔&gt;</p><h2><span id="介绍">介绍</span></h2><p>获取列表/数组的最后一个元素是一个常见的操作。在本教程中，我们将看看如何获取 JavaScript 数组/列表中的最后一个元素。</p><p>JavaScript 是一种<strong>弱类型</strong>或<strong>无类型</strong>语言，这意味着在使用之前不需要声明变量的类型，因为 JavaScript 通过读取变量的值来确定类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myList = [<span class="string">'cl9000'</span>, <span class="number">12</span>, <span class="string">'admin'</span>, <span class="number">56</span>, <span class="string">'We'</span>， <span class="number">10</span>];</span><br><span class="line">## 使用 length 获取最后一个元素</span><br><span class="line"></span><br><span class="line"><span class="string">`length`</span> 属性表示列表中元素的数量：</span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">console.log(myList.length)</span></span><br></pre></td></tr></table></figure><p>JavaScript 中数组/列表中的元素索引与其他语言非常相似。我们可以访问一个元素，基于它的索引，通过在方括号中传递它<code>[]</code>，引用数组。最后一个元素的索引为 <code>length-1</code>。</p><p>由于 <code>length</code> 字段仅返回元素的保存值 - 这是一种快速、高效且廉价的操作。获取 <code>JavaScript</code> 数组/列表最后一个元素的最佳方法是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lastElement = myList[myList.length - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(lastElement);</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2><span id="使用-pop-获取最后一个元素">使用 pop() 获取最后一个元素</span></h2><p><code>pop()</code> 方法返回集合的最后一个元素，但在此过程中将其删除。但是，如果我们使用 <code>ES6</code> 中的 <code>扩展运算符(...)</code> - 我们可以通过在内存中临时复制列表并 <code>pop()</code>在副本上执行，保持原始列表完整来避免此功能。</p><h3><span id="pop-方法">*pop()` 方法</span></h3><p>我们使用 <code>pop()</code> 从列表中删除最后一个元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lastElement = myList.pop();</span><br><span class="line"><span class="built_in">console</span>.log(lastElement)</span><br><span class="line"><span class="built_in">console</span>.log(myList)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// ['cl9000', 12, 'admin', 56, 'We']</span></span><br></pre></td></tr></table></figure><p>如果您不需要原始列表保持完整，那么您可以从中弹出元素，但如果您确实需要原始列表，您可以制作一个副本并 <code>pop()</code>从中复制。</p><h3><span id="带有-es6-扩展运算符-的-pop">带有 ES6 扩展运算符(…) 的 pop()</span></h3><p><code>ES6</code> 是 <code>EcmaScript6</code> 的缩写，它是一种<code>JavaScript</code> 标准，用于使 <code>JavaScript</code> 编程更容易（编码更少，但做得更多）。</p><p>它成立于 1997 年，它的第一个重大突破是在 2015 年，使用 ES6 标准（或 EcmaScript2015）。最新版本是 2020 年开发的第 11 个版本。所有版本都旨在使 JavaScript 编码更容易（使用新的语法规则、新的关键字等）。</p><p>我们在这里可以利用的是 <code>扩展运算符(...)</code><br>除其他功能外，扩展运算符可以复制列表/数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...myList]</span><br></pre></td></tr></table></figure><p>这将生成一个新列表，其元素与myList. 话虽如此 - 我们可以pop()从新列表而不是原始列表中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([...myList].pop())</span><br><span class="line"><span class="built_in">console</span>.log(myList)</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// ['cl9000', 12, 'admin', 56, 'We', 10]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这可能很方便编写，但不是最优的解决方案，因为它复制了一个列表。对于小列表，它不会大幅降低性能，但是对于更长的列表，这是简单地获取最后一个元素的低效方法。</p></blockquote><h2><span id="使用slice获取最后一个元素">使用slice()获取最后一个元素</span></h2><p><code>slice(a, b)</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myList.slice(<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">// [ 12, 'admin', 56]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myList.slice(<span class="number">-1</span>))</span><br><span class="line"><span class="comment">// [10]</span></span><br><span class="line"><span class="built_in">console</span>.log(myList.slice(<span class="number">-1</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>slice()</code>当您想检索数组的最后N 个元素而不是一个元素时，最好使用它，因为您可以简单地使用它length-1。</p></blockquote><h2><span id="使用-reverse-获取最后一个元素">使用 reverse() 获取最后一个元素</span></h2><p>reverse()方法就地反转列表。最后一个元素将成为第一个元素，反之亦然：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(myList.reverse())</span><br></pre></td></tr></table></figure><p>现在我们的元素是第一个，所以我们可以使用myListReversed[0].</p><blockquote><p>注意：反转数组/列表也是一个潜在的非常昂贵的操作。如果您只想访问最后一个元素，请避免反转集合。如果您无论如何都要反转它 - 您可以像这样访问元素。如果没有，请参考第一种使用方法length-1。</p></blockquote><h2><span id="总结">总结</span></h2><p>其中最好、最有效且可能最直观的方法是第一种 - <code>myList[myList.length()-1]</code>. 这是您大部分时间将使用的。</p><p>使用 <code>pop()</code>从列表中删除元素并返回它。如果您想删除元素 - 这是您想要使用的方法，否则，您将不得不手动删除元素。</p><p><code>slice()</code>给我们一个切片，如果我们想获得最后 N 个元素，这是一个很好的方法。</p><p><code>reverse()</code> 就地反转数组，如果您只想获取一个元素，则应避免使用。但是，如果您无论如何都要反转数组，这是个不错的选择。</p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/javascript-get-last-element-in-list" target="_blank" rel="noopener">https://stackabuse.com/javascript-get-last-element-in-list</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;万物皆有其美，但并非人人都能发现。——&amp;lt;安迪.沃霍尔&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;获取列表/数组的最后一个元素是一个常见的操作。在本教程中，我们将看看如何获取 JavaScript 数组/列表中的最后一个元素
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中更改元素的类-className和classList</title>
    <link href="https://cl9000.github.io/2021/06/08/Javascript%E4%B8%AD%E6%9B%B4%E6%94%B9%E5%85%83%E7%B4%A0%E7%9A%84%E7%B1%BB-className%E5%92%8CclassList/"/>
    <id>https://cl9000.github.io/2021/06/08/Javascript%E4%B8%AD%E6%9B%B4%E6%94%B9%E5%85%83%E7%B4%A0%E7%9A%84%E7%B1%BB-className%E5%92%8CclassList/</id>
    <published>2021-06-08T09:47:46.000Z</published>
    <updated>2021-06-08T10:08:08.491Z</updated>
    
    <content type="html"><![CDATA[<p>那些疯狂到认为自己能够改变世界的人，才能真正改变世界。——&lt;史蒂夫·乔布斯&gt;</p><blockquote><p>原文链接：<a href="https://stackabuse.com/how-to-change-elements-class-with-javascript-classname-and-classlista" target="_blank" rel="noopener">https://stackabuse.com/how-to-change-elements-class-with-javascript-classname-and-classlista</a></p></blockquote><h2><span id="介绍">介绍</span></h2><p>HTML 中的 <strong>class</strong> 属性用于为一个或多个 HTML 元素定义一个类。这样，很多元素可以属于同一类元素并在样式表中共享相同的样式，因此您不必一遍又一遍地为每个元素编写相同的样式。<br>话虽如此，有时您希望根据用户的输入动态更改样式。例如，您想为您的网页实现白天/黑夜模式，这可以通过更改元素的类来有效地完成。</p><p>当您想让用户自定义应用程序的任何方面时，这是一项常见任务。在本指南中 - 我们将看看如何在 JavaScript 中更改 HTML 元素的类。</p><h2><span id="dom树">DOM树</span></h2><p><strong>DOM</strong> 或 <strong>文档对象模型（Document Object Model）</strong> 是创建从XML或HTML的树结构的接口。文档元素的层次结构通过DOM表示。一棵树由节点和分支组成，其中元素是节点，元素之间的关系是分支。在 DOM 树中，根节点是html——开始标记 HTML 文档所需的第一个元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Web page title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Some heading&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>此页面的 DOM 树将如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- root element &lt;html&gt;</span><br><span class="line">    - element &lt;head&gt;</span><br><span class="line">        - element &lt;title&gt;</span><br><span class="line">            - text <span class="string">"Web page title"</span></span><br><span class="line">    - element &lt;body&gt;</span><br><span class="line">        - element &lt;h1&gt;</span><br><span class="line">            - text <span class="string">"Some heading"</span></span><br></pre></td></tr></table></figure><p>这是一个非常简单的树，但同样的过程适用于任何任意复杂的页面。多亏了 DOM 树，通过 JavaScript，我们可以访问页面上的所有 HTML 元素，以及元素的class、id、内容及其所有属性。我们甚至可以添加新元素并删除旧元素。我们可以创建事件来监听和响应它们（即当点击按钮时改变背景颜色）。</p><h2><span id="获取元素">获取元素</span></h2><p>现在我们知道我们可以从 HTML 获取一个元素，让我们看看如何使用 JavaScript实际做到这一点。要更改元素的类，我们首先必须检索它。根据元素的不同，我们可以通过几种不同的方法获取它们：</p><ul><li><code>getElementsByClassName(class_name)</code> - 返回HTMLCollection包含类名等于 <code>HTML</code> 元素的 <code>class_name</code>。</li><li><code>getElementById(id_name)</code> - 返回一个 <code>id</code> 等于 <code>HTML</code> 元素 <code>id_name</code>。</li><li><code>getElementsByTagName(tag_name)</code> - 返回一个 <code>HTMLCollection</code> 带有标签的元素 <code>tag_name</code>。</li></ul><p>我们将使用这个 HTML 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Web page title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-body"</span>&gt;</span><br><span class="line">true&lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"headings"</span>&gt;Some heading&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h3 class="headings"&gt;More of some heading&lt;/</span>h3&gt;</span><br><span class="line">    &lt;h5 <span class="class"><span class="keyword">class</span></span>=<span class="string">"headings"</span>&gt;Another heading here&lt;<span class="regexp">/h5&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    &lt;a href="https:/</span><span class="regexp">/www.google.com" id="link-to-google"&gt;Some random link&lt;/</span>a&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;Thing #1&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Thing #2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Thing #3&lt;/li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">    &lt;script src=<span class="string">"script.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h3><span id="使用getelementsbyclassname获取元素">使用getElementsByClassName()获取元素</span></h3><p>我们制作 script.js 导入到我们页面的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch script.js</span><br></pre></td></tr></table></figure><p>在其中 - 我们将定位并检索属于<code>“headings”</code>的元素class：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">"headings"</span>));</span><br></pre></td></tr></table></figure><p>由于可能有多个元素属于同一类 - 这将返回一个HTMLCollection：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTMLCollection(<span class="number">3</span>)</span><br><span class="line">true- <span class="number">0</span>: h1.headings</span><br><span class="line">true- <span class="number">1</span>: h3.headings</span><br><span class="line">true- <span class="number">2</span>: h5.headings</span><br><span class="line">truelength: <span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>HTMLCollection</code> 是 <code>HTML</code> 元素的集合，它提供了多种从集合中选择它们的方法，例如：</p><ul><li><code>className()</code>- 返回一个代表类名的字符串；这个方法也可以用来设置元素的类（这正是我们需要的）。</li><li><code>innerHTML()</code> - 由于 HTML 元素可以相互嵌套，如果有嵌套元素，此方法会将它们作为 HTML 返回。</li><li><code>innerText()</code> - 返回元素内的所有文本（包括嵌套元素）。</li></ul><p>还有很多我们可以监听的事件，例如：<code>onclick, ondblclick, onkeydown, onkeypress</code>。可以在官方文档中找到有关 JavaScript 事件的更多信息。<br><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events</a></p><h3><span id="使用getelementbyid获取元素">使用getElementById()获取元素</span></h3><p>您可以通过以下方法<code>getElementById()</code> 获取元素 <code>id</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"link-to-google"</span>));</span><br><span class="line"><span class="comment">// 结果是</span></span><br><span class="line">&lt;a href=<span class="string">"https://www.google.com"</span> id=<span class="string">"link-to-google"</span>&gt;Some random link&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="使用getelementsbytagname获取元素">使用getElementsByTagName()获取元素</span></h3><p>最后，如果元素没有 <code>class</code> 或 <code>id</code> ，我们还可以通过它们的 <code>tag</code> 找到元素。这将返回一组 HTML 元素，因为通常有多个具有相同标签的元素。<br>现在，如果我们想获取所有<code>&lt;li&gt;</code>元素，我们可以通过 <code>li</code> 标签进行搜索：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>));</span><br><span class="line"><span class="comment">// 结果是：</span></span><br><span class="line">HTMLCollection(<span class="number">3</span>) [li, li, li]</span><br><span class="line">true- <span class="number">0</span>: li</span><br><span class="line">true- <span class="number">1</span>: li</span><br><span class="line">true- <span class="number">2</span>: li</span><br></pre></td></tr></table></figure><p><code>getElementsByClassName</code> 返回值是一样的 - 一个 <code>HTMLCollection</code>。<br>无论用于获取元素的方法如何 - 我们现在都可以更改它的类。</p><h2><span id="使用-javascript-更改元素的类">使用 JavaScript 更改元素的类</span></h2><h3><span id="使用classname更改元素类">使用className更改元素类</span></h3><p>让我们创建一个 <code>index.html</code> 包含一些数据的虚拟页面。我们将允许用户在“白天模式”和“夜间模式”之间切换，这会改变网页上使用的调色板。我们还需要在 <code>script.js</code> 此处导入一个文件来查找和更改元素，以及一个 <code>style.css</code> 包含所有样式代码的文件。</p><p>让我们从以下开始index.html：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Day/night mode&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link rel="stylesheet" href="style.css"/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body class="page-body-day" id="page-body"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;h1 class="main-heading-day" id="main-heading"&gt;Some heading&lt;/</span>h1&gt;</span><br><span class="line">    &lt;p&gt;Dummy text, dummy text, dummy text&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;Some more dummy text, more dummy text, more dummy text&lt;/</span>p&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &lt;button onclick=<span class="string">"switchMode()"</span>&gt;Switch day/night mode&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script src=<span class="string">"script.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>当用户单击“切换日/夜模式”按钮时，所有将改变其外观的元素都有各自的id并分别分配了默认 <code>element-day</code> 类。</p><p>每个 <code>element-day</code> 类 <code>element-night</code> 在 <code>style.css</code> 文件中都有一个替代项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.page-body-day &#123;</span><br><span class="line">    background-color: white;</span><br><span class="line">    color: black;</span><br><span class="line">&#125;</span><br><span class="line">.page-body-night &#123;</span><br><span class="line">    background-color: #02182B;</span><br><span class="line">    color: yellow;</span><br><span class="line">&#125;</span><br><span class="line">.main-heading-day &#123;</span><br><span class="line">    color: black;</span><br><span class="line">&#125;</span><br><span class="line">.main-heading-night &#123;</span><br><span class="line">    color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们将更改元素的类，因此我们不想按类进行搜索，否则会出现边缘情况。我们将要搜索某个固定值的东西，即 <code>id</code>，然后检查该 <code>className</code>元素的 - 在该过程中将其更改为适当的类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">switchMode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// Body switching</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">"page-body"</span>).className == <span class="string">"page-body-day"</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"page-body"</span>).className = <span class="string">"page-body-night"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"page-body"</span>).className = <span class="string">"page-body-day"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Heading switching</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">"main-heading"</span>).className == <span class="string">"main-heading-day"</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"main-heading"</span>).className = <span class="string">"main-heading-night"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"main-heading"</span>).className = <span class="string">"main-heading-day"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>className</code>返回类元素的名称。但是，如果我们为其分配一个新值 - 我们可以有效地更新class标签的属性。如果元素有一个<code>element-day</code>类，我们将其更改为<code>element-night</code>，反之亦然。<br>当<code>color</code>在 <code>CSS</code> 中改变 <code>body</code> 的属性时，我们会自动改变所有没有 <code>color</code> 定义属性的元素（在我们的例子中是我们的<code>&lt;p&gt;</code>标签）。当类切换发生时，CSS 开始读取新切换的类并相应地应用样式。<br>不过，这种方法不是很现代，主要用于适应 Internet Explorer 8 和 9 的滞后功能。</p><h3><span id="使用classlist更改元素类">使用classList更改元素类</span></h3><p>较新的 Internet 浏览器支持名为 <code>classList</code>. 此属性提供的是应用于某个 <code>HTML</code> 元素的所有类的列表。</p><blockquote><p><strong>注意：</strong> Internet Explorer 8 和 9 不支持classList.</p></blockquote><p><code>classList</code> 有几种方法可以利用：</p><ul><li><code>add(class_name)</code> - <code>class_name</code> 在列表中添加一个新类。</li><li><code>remove(class_name)</code> - <code>class_name</code> 从列表中删除一个类。</li><li><code>toggle(class_name)</code> - <code>class_name</code> 如果尚未添加，则添加类，否则将其删除。</li><li><code>contains(class_name)</code> - 检查是否 <code>class_name</code> 在应用于 <code>HTML</code> 元素的类列表中。</li></ul><p>话虽如此 - 我们可以重写script.js文件以使用这些方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">switchMode</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="comment">// Body switching</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">"page-body"</span>).classList.contains(<span class="string">"page-body-day"</span>))&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"page-body"</span>).classList.remove(<span class="string">"page-body-day"</span>);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"page-body"</span>).classList.add(<span class="string">"page-body-night"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"page-body"</span>).classList.remove(<span class="string">"page-body-night"</span>);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"page-body"</span>).classList.add(<span class="string">"page-body-day"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Heading switching</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">"main-heading"</span>).classList.contains(<span class="string">"main-heading-day"</span>))&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"main-heading"</span>).classList.remove(<span class="string">"main-heading-day"</span>);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"main-heading"</span>).classList.add(<span class="string">"main-heading-night"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"main-heading"</span>).classList.remove(<span class="string">"main-heading-night"</span>);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"main-heading"</span>).classList.add(<span class="string">"main-heading-day"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法在 <code>HTML5</code> 和现代浏览器中得到支持，通过这种方式，您可以以类似于<code>jQuery</code> 的方式操作类 - 一个广泛用于操作 <code>HTML</code> 元素、事件等的 <code>JavaScript</code> 库。</p><p>通过 <code>classList</code>，您可以跳过包含减少**PLT（页面加载时间）**的外部库，<strong>PLT（页面加载时间）</strong> 最近已成为SEO 分级的重要Web 重要信号。</p><h2><span id="结论">结论</span></h2><p>JavaScript 获得了大量采用，因为 DOM 使得它可以非常简单地操作网页上的所有内容，等等。</p><p>在本教程中，我们研究了如何在 JavaScript 中更改元素的类。</p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/how-to-change-elements-class-with-javascript-classname-and-classlist" target="_blank" rel="noopener">https://stackabuse.com/how-to-change-elements-class-with-javascript-classname-and-classlist</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;那些疯狂到认为自己能够改变世界的人，才能真正改变世界。——&amp;lt;史蒂夫·乔布斯&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://stackabuse.com/how-to-change-elements-class-with-j
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中的JS库Brython 介绍指南</title>
    <link href="https://cl9000.github.io/2021/06/07/Javascript%E4%B8%AD%E7%9A%84JS%E5%BA%93Brython-%E4%BB%8B%E7%BB%8D%E6%8C%87%E5%8D%97/"/>
    <id>https://cl9000.github.io/2021/06/07/Javascript%E4%B8%AD%E7%9A%84JS%E5%BA%93Brython-%E4%BB%8B%E7%BB%8D%E6%8C%87%E5%8D%97/</id>
    <published>2021-06-07T09:55:10.000Z</published>
    <updated>2021-06-07T10:33:11.260Z</updated>
    
    <content type="html"><![CDATA[<p>创造力是自律与童心的结合体。——&lt;罗伯特·格林&gt;</p><h2><span id="介绍">介绍</span></h2><p>在开发 <code>Web</code> 应用程序时 - 我们通常使用多种技术和语言。后端可以很容易地用 <code>Java（Spring Boot</code>）、<code>Python（Django 或 Flask</code>）或 <code>JavaScript (Node.js)</code> 构建，但前端更常使用 <code>JavaScript（React、Angular 等）</code>构建。有时，我们甚至采用混合方法让服务器端呈现页面，并在 <code>React</code> 等前端框架中完成最后的修饰。</p><p>多年来，鉴于其在 <code>Web</code> 上的流行——<code>JavaScript</code> 社区扩展了原始功能以启用 <code>JavaScript</code> 驱动的后端，包括前端。在 <code>JavaScript</code> 中编写 <code>Web</code> 应用程序的最常见方法是使用<code>MEAN</code>堆栈。一个 <code>MongoDB</code> 数据库，<code>Node.js</code> 和 <code>Express.js</code> 作为后端，<code>Angular</code>（或者最近的 <code>React</code>）作为前端。</p><p>但是，如果您真的更喜欢使用 <code>Python</code> 开发您的应用程序呢？虽然严格专注于一种编程语言是不可取的 - 语言是工具，而专注于一种工具会让你不那么灵活 - 单语言应用程序仍有空间。</p><p><strong>Brython 可能是解决方案！</strong> 它是一个 <code>JavaScript</code> 库，可让您在浏览器中运行 <code>Python</code> 代码。</p><blockquote><p>你可能已经猜到了，Brython 是 Browser Python 的缩写。</p></blockquote><p>顾名思义，<code>Brython</code> 的主要目标是取代 <code>JavaScript</code> 并推动 <code>Python</code> 作为 <code>Web</code> 浏览器的主要脚本语言，适用于您的应用程序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script src=<span class="string">"/brython.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body onload=<span class="string">"brython()"</span>&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/python"</span>&gt;</span><br><span class="line">            <span class="keyword">import</span> browser</span><br><span class="line">            browser.document &lt;= <span class="string">"Hello world!"</span></span><br><span class="line">         &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;script&gt;</code> 通常不支持的 <code>text/python</code> 类型可以解释的 <code>Python</code> ，我们已经写了代码。在这里，我们向 <code>browser.document</code> 打印了一条 <code>Hello World</code>消息，这类似于 <code>JavaScript</code> 的 <code>document</code>.</p><p>在本 <code>Brython</code> 入门指南中- 我们将了解如何安装 <code>Brython</code>、如何初始化 <code>Brython</code> 项目、如何设置页面样式，并将其与一些替代方案进行比较。</p><h2><span id="如何安装-brython">如何安装 Brython</span></h2><h3><span id="利用内容分发网络">利用内容分发网络</span></h3><p>实际上，安装 <code>Brython</code> 最方便的方法可能是根本不安装它。如果你不需要在本地安装它，只需要在静态网页上加载它来添加一些动态功能，你应该考虑简单地导入一个外部资源。<br>其思想是将 <code>brython.js</code> 库加载到 <code>HTML</code> 页面的 <code>&lt;head&gt;</code> 部分。这样，客户端将下载库的同时 <code>HTML</code> 页面加载到他们的 <code>PC</code> 上。</p><p>为了实现这一行为，我们将从托管最新稳定版 <code>Brython</code> 在线的一些 <code>cdn</code> (内容分发网络)中加载我们的库。</p><blockquote><p>基本上，内容交付网络是一组托管一些数据(代码、视频内容、图像…)的分布式服务器。这些类型的网络非常可靠，几乎没有停机时间。这使它们成为托管代码库的理想选择。</p></blockquote><p>有几个cdn可供选择，但是，三个受欢迎的是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Option <span class="number">1</span> : jsDelivr CDN --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/brython@3.9.1/brython.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/brython@<span class="number">3.9</span><span class="number">.1</span>/brython_stdlib.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Option 2: CloudFlare CDN --&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span>https:<span class="comment">//cdnjs.cloudflare.com/ajax/libs/brython/3.9.1/brython.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/brython/3.9.1/brython_stdlib.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- Option 3: GitHub as the CDN --&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- Choose this option if you want to use the latest developement version --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/raw.githack.com/</span>brython-dev/brython/master/www/src/brython.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span>https:<span class="comment">//raw.githack.com/brython-dev/brython/master/www/src/brython_stdlib.js"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="通过-pip-安装-brython">通过 Pip 安装 Brython</span></h3><p>如果你想要更灵活的 <code>Brython</code>，你可以本地安装:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install brython</span><br><span class="line"></span><br><span class="line">验证 Brython 是否已经成功安装:</span><br><span class="line">$ pip show brython </span><br><span class="line"><span class="comment">// Name: brython</span></span><br><span class="line"><span class="comment">// Version: 3.9.2</span></span><br><span class="line"><span class="comment">// Summary: Brython is an implementation of Python 3 running in the browser</span></span><br><span class="line"><span class="comment">// Home-page: http://brython.info</span></span><br><span class="line"><span class="comment">// Author: Pierre Quentel</span></span><br><span class="line"><span class="comment">// Author-email: quentel.pierre@orange.fr</span></span><br><span class="line"><span class="comment">// License: BSD</span></span><br></pre></td></tr></table></figure><h2><span id="如何初始化brython项目">如何初始化Brython项目</span></h2><p>安装 <code>Brython</code> 之后，下一步显然是创建一个简单的项目来测试它的功能。要创建项目，请创建一个新文件夹并移动到它:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir brython-project</span><br><span class="line">$ cd brython-project</span><br></pre></td></tr></table></figure><p>现在可以运行以下命令初始化 <code>Brython</code> 项目:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brython-cli --install</span><br></pre></td></tr></table></figure><p>这将创建并初始化一个 <code>Brython</code> 项目，包括启动项目目录和文件层次结构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brython-project</span><br><span class="line">    | brython.js</span><br><span class="line">    | brython_stdlib.js</span><br><span class="line">    | demo.html</span><br><span class="line">    | index.html</span><br><span class="line">    | README.md</span><br><span class="line">    | unicode.txt</span><br></pre></td></tr></table></figure><p>首先，让我们解释一下所有这些文件的用途:</p><ul><li><code>Brython .js</code> - <code>Brython</code>核心引擎，它包含了最常用的模块，如<code>browser, browser.html, javascript…</code>如果我们选择不在本地安装<code>Brython</code>，该文件将使用<code>&lt;script&gt;</code>标记包含在HTML页面中。</li><li><code>brython_stdlib.js</code> - 包含 <code>Brython</code> 支持的 <code>Python</code>标准库中的所有包和模块。</li><li><code>demo.html</code>  - 一个运行Brython的简单HTML页面，展示了一些有趣的用例和如何利用 <code>Brython</code> 修改静态HTML页面的示例。</li><li><code>index.html</code> - 一个简单的 <code>Hello World</code> HTML页面。</li></ul><p>只使用一个简单的 <code>web</code> 浏览器就可以打开 <code>demo.html</code> ，但是这种方法有其局限性，因此建议首先启动本地主机服务器</p><p>如果您还没有http安装该模块，您也可以通过pip以下方式安装它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install http</span><br></pre></td></tr></table></figure><p>安装后，我们可以启动服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m http.server</span><br></pre></td></tr></table></figure><p>现在，您应该在 (默认) 上启动本地主机 <code>port 8000</code>，并且您应该能够 <code>demo.html</code> 通过导航到您选择的 Web 浏览器的地址栏中的<code>http://localhost:8000/demo.html(或http://0.0.0.0:8000/demo.html)</code>来访问该页面。</p><p>如果端口 <code>8000</code> 当前被其他进程使用，则您必须定义另一个要使用的端口（例如 8080）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m http.server <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>要创建一个能够运行 <code>Python</code> 的新 HTML 页面，您只需要在文件部分导入<code>brython.js</code>和文件。然后，您可以继续在 HTML 文件本身中编写 <code>Python：brython_stdlib.jshead</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"brython.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="brython_stdlib.js.js"&gt;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2><span id="brython-的工作原理">Brython 的工作原理</span></h2><p><code>Brython</code> 通过将 <code>Python</code> 代码转换为 <code>JavaScript</code>，使我们能够在浏览器中编写和运行 <code>Python</code> 代码。这段代码将能够在所有支持 <code>JavaScript</code> 的现代浏览器中运行，因为 <code>Brython</code>有意避免使用新的、不受支持的语法生成 <code>JavaScript</code>。<br><a href="https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them" target="_blank" rel="noopener">https://scotch.io/tutorials/javascript-transpilers-what-they-are-why-we-need-them</a></p><blockquote><p>您可以将转译视为编译的一个子集。<br>编译过程通常将用某种高级编程语言（例如C）编写的源代码转换成某种低级语言（例如机器代码）。<br>另一方面，<code>transpilation</code> 是将一种高级语言转换为另一种高级语言（例如 <code>Python 到 JavaScript</code>）的过程。</p></blockquote><p><code>Brython</code> 中的转译发生在加载 <code>HTML</code> 页面的同时。在这里，我们在 <code>HTML</code> 文档 <code>brython()</code> 的 <code>body</code> 标签中调用函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=<span class="string">"brython()"</span>&gt;</span><br></pre></td></tr></table></figure><p><code>brython()</code> 函数执行编写在<code>&lt;script type=&quot;text/python&quot;&gt;</code>HTML 文档标签中的 <code>Python</code> 代码的转译。所有 <code>Python</code> 代码都必须用<code>&lt;script type=&quot;text/python&quot;&gt;</code>标记包围：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/python"</span>&gt;</span><br><span class="line">    &lt;!-- Python code --&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>或者，我们可以通过使用以下命令将外部 <code>Python</code> 代码加载到 <code>HTML</code> 文档中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/python"</span> src=<span class="string">"test.py"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>所有现代 Web 浏览器都支持 JavaScript 作为主要脚本语言，但不支持 Python。因此，所有 Python 代码都需要转换为 JavaScript，然后在加载 HTML 页面所需的时间内运行。</p><p>首先，<code>brython()</code>函数通过检查所有类型为 的脚本来搜索 HTML 页面中的所有 <code>Python</code> 代码 <code>text/python</code>，然后将所有代码转换为 <code>JavaScript</code>：</p><blockquote><p><strong>这种转换的结果是 JavaScript 代码的简单字符串表示。该字符串必须在浏览器中作为 JavaScript 代码运行。</strong></p></blockquote><p><code>Brython</code> 使用 <code>JavaScripteval()</code>函数来运行所有翻译后的代码。或者，它可以利用 <code>JavaScript</code> 命令 <code>new Function(function_name, source)(module)</code> 在某些浏览器上运行代码。</p><blockquote><p><strong>这不是运行 JavaScript 的首选方式。使用eval()可能很危险，因为它可能会将应用程序暴露给潜在的恶意第三方代码。此外，eval()与替代品相比，速度相当慢。</strong></p></blockquote><p>如果 Python 代码通过 加载到 HTML 文档中<code>&lt;script type=&quot;text/python&quot; src=&quot;url&quot;&gt;</code>，Brython 将执行 Ajax 调用以获取加载文件的内容。该代码被转换为 JavaScript 并以与上述相同的方式执行。</p><h2><span id="使用-brython-示例">使用 Brython - 示例</span></h2><p>现在，让我们回顾一些简单的例子，以便您了解 Brython 的工作原理及其功能：</p><h2><span id="heoll-word"><strong>Heoll Word</strong></span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script src=<span class="string">"/brython.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body onload=<span class="string">"brython()"</span>&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/python"</span>&gt;</span><br><span class="line">            <span class="keyword">import</span> browser</span><br><span class="line">            browser.document &lt;= <span class="string">"Hello world!"</span></span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>我们将重点关注<script type="text/python"></script>标签之间的 Python 代码：</p><ul><li><code>import browser</code>  将 <code>browser</code> 包加载到脚本中。它是对所有 <code>Brython</code> 特定名称和模块进行分组的包，主要用于表示 <code>JavaScript</code> 中使用的 <code>DOM</code> 元素和事件。</li><li><code>browser.document</code> 是表示当前显示的 <code>HTML</code> 文档的对象。</li><li><code>browser.document &lt;= &quot;Hello world!&quot;</code> - 我们使用 <code>&lt;=</code> 符号而不是 <code>=</code> . 的 <code>document</code> “接收”包含字符串的新元素 <code>Hello world!</code>。另一种方法是使用以下语法：<code>browser.document.attach(&quot;Hello world!&quot;)</code>.</li></ul><p>在客户端，一旦呈现此代码 - 它会导致：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script src=<span class="string">"/brython.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body onload=<span class="string">"brython()"</span>&gt;</span><br><span class="line">        Hello world!</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2><span id="添加元素和属性">添加元素和属性</span></h2><p>让我们修改前面的示例并为其添加一些段落和文本格式。该browser接口为我们提供了html模块，该模块公开了 HTML 标记，我们可以使用这些标记从 Python 代码动态创建 HTML 结构。创建对象的语法是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.html.TAG(<span class="string">"content"</span>, [attributes])</span><br></pre></td></tr></table></figure><p>哪些输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;TAG [attributes]&gt;content&lt;<span class="regexp">/TAG&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>browser.html.H2(&quot;Hello world!&quot;)Hello world</code> 用 <code>&lt;h2&gt;</code>标签包裹字符串。</li><li><code>browser.html.A(&quot;link&quot;, href=&quot;stackabuse.com&quot;)</code> 创建一个 <code>&lt;a href=&quot;stackabuse.com&quot;&gt;</code> 标签。</li></ul><p>使用这种语法也可以嵌套，只需 <code>html.element</code> 在另一个元素中包含一个。让我们在页面中添加一些元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script src=<span class="string">"/brython.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body onload=<span class="string">"brython()"</span>&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/python"</span>&gt;</span><br><span class="line">            <span class="keyword">import</span> browser</span><br><span class="line">            </span><br><span class="line">            title = browser.html.H2(<span class="string">"Hello world!"</span>)</span><br><span class="line"></span><br><span class="line">            bold = browser.html.B(<span class="string">"bold text"</span>)</span><br><span class="line">            url = browser.html.A(<span class="string">"link"</span>, href=<span class="string">"stackabuse.com"</span>)</span><br><span class="line">            paragraph = browser.html.P(<span class="string">"This is a paragraph. This is "</span> + bold + <span class="string">", and this is a "</span> + url)</span><br><span class="line"></span><br><span class="line">            browser.document &lt;= title</span><br><span class="line">            browser.document &lt;= paragraph         </span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>或者， <code>url = browser.html.A(&quot;link&quot;, href=&quot;stackabuse.com&quot;)</code>您可以不使用任何参数创建一个对象，而不是创建一个带有参数的对象并构建它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Creating an &lt;a&gt;&lt;/a&gt; tag</span><br><span class="line">url = browser.html.A()</span><br><span class="line"></span><br><span class="line"># Adding content between created tags</span><br><span class="line"># &lt;a&gt;Url Text&lt;/a&gt;</span><br><span class="line">url &lt;= <span class="string">"Url Text"</span></span><br><span class="line"># Adding href attribute</span><br><span class="line"># &lt;a href="cl9000.github.io"&gt;Url Text&lt;/a&gt;</span><br><span class="line">url.href = <span class="string">"cl9000.github.io"</span></span><br></pre></td></tr></table></figure><p>当我们完成 Python 代码并在浏览器中打开页面时 - 生成的 HTML 页面应如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script src=<span class="string">"/brython.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body onload=<span class="string">"brython()"</span>&gt;</span><br><span class="line">        &lt;h2&gt;Hello world!&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;</span></span><br><span class="line"><span class="regexp">            This is a paragraph. This is &lt;b&gt;bold text&lt;/</span>b&gt;, and <span class="keyword">this</span> is a </span><br><span class="line">            &lt;a href=<span class="string">"stackabuse.com"</span>&gt;link&lt;<span class="regexp">/a&gt;.</span></span><br><span class="line"><span class="regexp">        &lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>我们有一个 <code>&lt;p&gt;</code> 元素，在其中我们使用了预先构造的 <code>&lt;b&gt;and&lt;a&gt;</code> 元素。</p><h3><span id="使用-brython-创建表格">使用 Brython 创建表格</span></h3><p>可以使用与我们迄今为止一直应用的逻辑大致相同的逻辑来创建表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table = browser.html.TABLE()</span><br></pre></td></tr></table></figure><p>现在，让我们用一些模拟数据创建几行并将它们添加到 <code>table</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Creating the row</span><br><span class="line">row = browser.html.TR()</span><br><span class="line"># Adding header cells</span><br><span class="line">row &lt;= browser.html.TH(<span class="string">"Header1"</span>)</span><br><span class="line">row &lt;= browser.html.TH(<span class="string">"Header2"</span>)</span><br><span class="line"># Appending the row to the table</span><br><span class="line">table &lt;= row</span><br><span class="line"></span><br><span class="line"># Adding a first row</span><br><span class="line">row = browser.html.TR()</span><br><span class="line">row &lt;= browser.html.TD(<span class="string">"Data 1"</span>)</span><br><span class="line">row &lt;= browser.html.TD(<span class="string">"Data 2"</span>)</span><br><span class="line">table &lt;= row</span><br></pre></td></tr></table></figure><p>最后，我们选择 <code>&lt;div id=&quot;table-zone&quot;&gt;</code>在 HTML 页面上创建的银行元素中显示表格：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tableZone = browser.document[<span class="string">"table-zone"</span>] </span><br><span class="line">tableZone &lt;= table</span><br></pre></td></tr></table></figure><p>这会在我们的页面上生成一个 HTML 表格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"table-zone"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;Header <span class="number">1</span>&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">              &lt;th&gt;Header 2&lt;/</span>th&gt;</span><br><span class="line">            &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;td&gt;Data <span class="number">1</span>&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">              &lt;td&gt;Data 2&lt;/</span>td&gt;</span><br><span class="line">            &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tbody&gt;</span><br><span class="line">    &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3><span id="向现有元素添加样式">向现有元素添加样式</span></h3><p>让我们为 <code>&lt;div id=&quot;table-zone&quot;&gt;</code> 和 <code>table</code> 元素添加一些样式：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tableZone.style = &#123;</span><br><span class="line">            <span class="string">"background-color"</span>: <span class="string">"#dedfdd"</span>,</span><br><span class="line">            <span class="string">"width"</span>: <span class="string">"50%"</span>,</span><br><span class="line">            <span class="string">"min-height"</span>: <span class="string">"100px"</span>,</span><br><span class="line">            <span class="string">"margin"</span>: <span class="string">"auto"</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="keyword">table</span>.style <span class="comment">= &#123;</span></span><br><span class="line">            <span class="string">"border"</span>: <span class="string">"1px solid #333"</span>,</span><br><span class="line">            <span class="string">"margin"</span>: <span class="string">"auto"</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>这将导致修改后的 HTML 标签style添加属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"table-zone"</span> style=<span class="string">"background-color: rgb(222, 223, 221); width: 50%; min-height: 100px; margin: auto;"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;table style=<span class="string">"border: 1px solid rgb(51, 51, 51); margin: auto;"</span>&gt;</span><br></pre></td></tr></table></figure><h3><span id="绑定操作和从元素读取内容">绑定操作和从元素读取内容</span></h3><p>网页不仅用于显示数据 - 它们还用于捕获数据。表单是我们提示用户发送数据的最基本方式之一。让我们在 Brython 中使用 <code>FORM()</code> 函数以及其他 HTML 元素（例如 <code>INPUT()</code>和 <code>LABEL()</code>）创建一个表单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Create a &lt;div id="form-div"&gt; element as a container for a new form</span><br><span class="line">formDiv = browser.html.DIV(id=<span class="string">"form-div"</span>)</span><br><span class="line"># Create a &lt;form&gt; element </span><br><span class="line">form = browser.html.FORM()</span><br><span class="line"></span><br><span class="line"># Create the &lt;input type="text"&gt; field wit the label and add it to the form</span><br><span class="line">input = browser.html.INPUT()</span><br><span class="line">input.type = <span class="string">"text"</span></span><br><span class="line">input.id = <span class="string">"input-name"</span></span><br><span class="line"># Add label and to the form</span><br><span class="line">form &lt;= browser.html.LABEL(<span class="string">"Enter your name: "</span>) + input</span><br><span class="line"></span><br><span class="line"># Create the submit button and add it to the form</span><br><span class="line">button = browser.html.INPUT()</span><br><span class="line">button.type = <span class="string">"button"</span></span><br><span class="line">button.value = <span class="string">"Submit"</span></span><br><span class="line">button.id = <span class="string">"submit-button"</span></span><br><span class="line">form &lt;= button</span><br><span class="line"></span><br><span class="line"># Add form to the container &lt;div&gt; element</span><br><span class="line">formDiv &lt;= form</span><br><span class="line"># Add the &lt;h4 id="form-response"&gt; to show the value from the form</span><br><span class="line">formDiv &lt;= browser.html.H4(<span class="string">"Your name is: "</span>, id=<span class="string">"form-response"</span>)</span><br><span class="line"># Display the div element containing form on the page</span><br><span class="line">browser.document &lt;= formDiv</span><br></pre></td></tr></table></figure><p>不做任何事情的表单不是很有用。我们也可以在 Brython 中使用自定义函数。让我们创建一个<code>click</code>在<code>submit</code>按钮上调用的 Python 函数。它会提醒用户按钮已被点击并更新 <code>&lt;h4 id=&quot;form-response&quot;&gt;</code>元素的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def onSubmit(ev):</span><br><span class="line">    # Get the value of the &lt;input id="input-name"&gt; field</span><br><span class="line">    name = browser.document[<span class="string">"input-name"</span>].value</span><br><span class="line">    # Append the stored value to the content in the &lt;h4 id="form-response"&gt; tag</span><br><span class="line">    browser.document[<span class="string">"form-response"</span>] &lt;= name</span><br><span class="line">    # Alert the user that the button has been clicked</span><br><span class="line">    browser.alert(<span class="string">"The Submit Button is Clicked"</span>)</span><br></pre></td></tr></table></figure><p>最后，我们将<code>click</code>事件 <code>submit-button</code> 与创建的<code>onSubmit()</code>函数绑定，以便我们在按钮单击时获得所需的行为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.document[<span class="string">"submit-button"</span>].bind(<span class="string">"click"</span>, onSubmit)</span><br></pre></td></tr></table></figure><h2><span id="结论">结论</span></h2><p>如果您正在寻找 JavaScript 作为 Web 脚本语言的替代方案，并且不太关心性能，那么 Brython 可能是一个不错的解决方案。</p><p>它平衡了执行速度和加载库所需的多余内存使用之间不可避免的权衡，使其成为在浏览器中运行 Python 的最佳解决方案之一。</p><p>另一方面，Brython 没有庞大的社区，也没有被广泛接受或使用。学习资源非常有限，您将仅限于主要是官方文档，而没有许多现实世界的大型项目可以寻求指导。</p><p>最终，主要问题是是否值得完全替换 JavaScript。与用 JavaScript 编写的完全相同的项目相比，即使是小型 Brython 项目的执行速度也可能慢 2 倍。与 Brython 不同，JavaScript 拥有庞大的开发者社区、海量资源和展示其全部潜力的真实项目。</p><p>让我们不要忘记所有的 JavaScript 框架，它们是 JavaScript 流行的支柱。如果没有他们的帮助，JavaScript 将只是另一种脚本语言，它为我们提供了动态更改静态 HTML 页面内容的能力。例如，想象一下用纯 JavaScript 编写复杂的服务器端逻辑。即使那是可行的，这肯定不会是一个非常愉快的经历。</p><p>不幸的是，Brython 没有为其开发框架，因此您只能使用纯 Python 代码，这对于除简单用例之外的任何其他内容都不合理。您可能无法使用 Brython 创建一些复杂的单页 Web 应用程序，而您可以使用 JavaScript 和 Angular。Brython 是一个很好的工具，对于那些只想使用 Python 进行服务器端和客户端编程的开发人员来说，但它可能离取代 JavaScript 还有很长的路要走</p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/an-introductory-guide-to-brython" target="_blank" rel="noopener">https://stackabuse.com/an-introductory-guide-to-brython</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创造力是自律与童心的结合体。——&amp;lt;罗伯特·格林&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在开发 &lt;code&gt;Web&lt;/code&gt; 应用程序时 - 我们通常使用多种技术和语言。后端可以很容易地用 &lt;code&gt;Java（Sp
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中如何重定向到另一个网页</title>
    <link href="https://cl9000.github.io/2021/06/07/Javascript%E4%B8%AD%E5%A6%82%E4%BD%95%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5/"/>
    <id>https://cl9000.github.io/2021/06/07/Javascript%E4%B8%AD%E5%A6%82%E4%BD%95%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BD%91%E9%A1%B5/</id>
    <published>2021-06-07T09:25:46.000Z</published>
    <updated>2021-06-07T09:52:24.704Z</updated>
    
    <content type="html"><![CDATA[<p>创造力是智力的乐趣。——&lt;阿尔伯特·爱因斯坦&gt;</p><h2><span id="介绍">介绍</span></h2><p>通常，我们需要重定向用户到另一个网站或同一网站上的另一个网页。有几种重定向方法，包括 <code>JavaScript</code> 重定向、服务器端重定向和 <code>HTML</code> 元刷新重定向。重定向基本上是一种将用户发送到另一个 <code>URL</code> 地址的机制。</p><p>使用重定向的动机各不相同，在大多数情况下，这是因为:</p><ul><li>由于任何原因，您转移到了另一个域，因此当用户访问旧域上的内容时，您可以将用户重定向到新域。</li><li>您有多个页面，它们的内容会根据位置、语言、浏览器或将用户重定向到最适合的页面的其他因素而变化。</li><li>您将未经身份验证或未经授权的用户对资源的请求重定向到登录页面。</li><li>您将用户发送到与当前站点内容相关的其他页面。</li></ul><p>所有这些实际上都是通过包含 <code>URL</code> 信息的 <code>Location</code> 对象实现的。有几种方法可以做到这一点，通过操作 <code>Location</code> 对象的不同属性。<br>在本教程中，我们将看看如何用 <code>JavaScript</code> 将用户重定向到不同的网页，以及如何减少潜在的负面 <code>SEO</code> 影响:</p><ul><li>使用 <code>location.href</code> 重定向用户 <a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#redirectuserswithlocationhref" target="_blank" rel="noopener">https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#redirectuserswithlocationhref</a></li><li>使用 <code>location.assign()</code> 重定向用户 <a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#redirectuserswithlocationassign" target="_blank" rel="noopener">https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#redirectuserswithlocationassign</a></li><li>使用 <code>location.replace()</code> 重定向用户 <a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#redirectuserswithlocationreplace" target="_blank" rel="noopener">https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#redirectuserswithlocationreplace</a></li><li>安全影响和副作用 <a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#securityimplicationandsideeffects" target="_blank" rel="noopener">https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#securityimplicationandsideeffects</a></li><li>对 <code>SEO</code> 的影响 <a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#influenceonseo" target="_blank" rel="noopener">https://stackabuse.com/javascript-how-to-redirect-to-another-webpage#influenceonseo</a></li></ul><h2><span id="windowlocation-属性">window.location 属性</span></h2><p><code>window.location</code> 对象表示<code>window/user</code>的当前位置，或者更确切地说<code>URL</code>。从技术上讲，它是一个只读属性，但是，我们可以通过给它的属性赋新值(<code>DOMStrings</code>)来操作它。<code>windows.location</code>对象的 <code>windows</code>前缀可以省略，因为它按层次结构位于作用域的顶部。</p><h2><span id="使用-locationhref-重定向用户">使用 location.href 重定向用户</span></h2><p><code>location.href</code>属性表示当前 <code>URL</code> 为字符串。改变 <code>href</code> 属性也会自动引导用户到新的 <code>href</code> 值。改变 <code>href</code> 属性就像给它赋一个新值一样简单:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.href = <span class="string">"https://cl9000.github.io/"</span>;</span><br></pre></td></tr></table></figure><p>注意：功能等效的代码行是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windows.location = <span class="string">"https://cl9000.github.io"</span>;</span><br></pre></td></tr></table></figure><p>值得一提的是，你可以将用户重定向到一个域其他比他们目前是在使用这种方法的领域，但是，安全问题可以从这个引起的，所以做法应该应尽量避免使用。</p><p>重定向通常与某种事件相关，例如按下将用户重定向到不同网页的按钮，或其他事件，例如用户在网站上执行某些操作（在社交媒体上上传图像，然后他们“例如，重新重定向到该帖子）。让我们编写一个简单的函数，通过单击按钮重定向用户：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Redirection&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type = "text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        function Redirect() &#123;</span></span><br><span class="line"><span class="string">         window.location.href = "</span>https:<span class="comment">//stackabuse.com/";</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"Redirect Me"</span> onclick=<span class="string">"Redirect()"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2><span id="使用-locationassign-重定向用户">使用 location.assign() 重定向用户</span></h2><p><code>location.assign(url)</code> 方法加载提供的资源 <code>url</code> ，并将其显示在 <code>window</code>. 与设置 <code>href</code>属性相比，这实际上是重定向用户的首选方法，因为它还会检查所提供的安全性，<code>url</code>如果它不是安全目的地，则会抛出异常。<br>另一个好处是它在浏览器的历史记录中创建了一个新条目，允许用户根据需要优雅地“返回”。<br>还值得注意的是 <code>location.assign()</code> 不允许跨域重定向。您只能重定向到进行的同一个域，这对安全性有积极影响。</p><p>除此之外，它的使用方式与为 分配新值的方式大致相同 <code>location.href</code>。让我们重写我们的页面以使用该 <code>assign()</code>函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Assigning&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type = "text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        function Assign() &#123;</span></span><br><span class="line"><span class="string">         window.location.assign("</span>https:<span class="comment">//stackabuse.com/");</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"Redirect Me"</span> onclick=<span class="string">"Assign()"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2><span id="使用-locationreplace-重定向用户">使用 location.replace() 重定向用户</span></h2><p><code>replace(url)</code> 方法可用于将 上的当前资源替换为 从<code>window</code> 加载的资源 <code>url</code>。它不会真正重定向用户，也不会存储在浏览器的历史记录中。存在与 <code>assign()</code>方法相同的安全约束，如果您想用另一个页面替换内容，这使其成为一种理想的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Replacing&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type = "text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        function Replace() &#123;</span></span><br><span class="line"><span class="string">         window.location.Replace("</span>https:<span class="comment">//stackabuse.com");</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"Redirect Me"</span> onclick=<span class="string">"Replace()"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>还值得注意的是，<code>assign()</code>方法有一个严重的潜在问题。如果用户要返回到自动运行 <code>assign()</code> 方法的页面，他们将被重定向回他们尝试从返回的页面。然后他们会通过 <code>Back Button</code> 进入一个“返回”循环，但由于 <code>assign()</code> 方法而被重定向到另一个页面。</p><p>如果您正在使用 <code>assign()</code>，请确保它不会在页面上自动调用，并且它的调用需要用户的操作，例如在按下按钮时调用它。如果没有 - 使用 <code>location.replace()</code>。</p><p>此外，<code>location.replace()</code> 最接近 <code>HTTP</code> 重定向，因为原始链接不会添加到浏览器的历史记录中。</p><h2><span id="安全影响和副作用">安全影响和副作用</span></h2><p>提到的安全性适用于上述所有方法，它指的是以下几个方面：</p><ul><li>如果这是调用此方法的脚本的来源是不一样的当前页面的起源-这将被视为一个安全违规，抛出：<code>DOMException</code> 的 <code>SECURITY_ERROR</code> 类型将被抛出。也就是说，嵌入到您自己页面中的外部库和服务将无法重定向用户。</li><li>如果存储的 <code>URL</code> 无效，<code>DOMException</code>则会抛出 <code>a</code>。</li><li>如果您将用户重定向到他们所在域以外的域，<code>CORS</code>可能会启动并阻止它。</li></ul><p>由于人为设计问题而可能发生的一些可能的副作用是：</p><ul><li>当重定向（除了<code>replace()</code>）发生得太快（即不到 3 秒）时，它可能会破坏浏览器上的后退按钮。这意味着每次您尝试返回上一页时，重定向几乎会立即再次发生，从而造成无限循环。</li><li>它可以被认为是不推荐的 <code>Doorway Page</code>（即为 <code>SEO</code> 索引操作创建的页面）</li><li>计划和使用不当的重定向会导致链式重定向，即在两个或多个页面之间重定向。</li></ul><h2><span id="对-seo-的影响">对 SEO 的影响</span></h2><p>对 SEO 的影响<br>有许多影响因素SEO，很多人实际上并没有公开的，以免他们滥用。不过，可以肯定的是，优化不当的代码会对 SEO 产生负面影响。它可能导致加载时间过长、重定向链甚至循环。许多网络爬虫不会执行会对页面排名产生负面影响的 JavaScript 代码。</p><p>克服这些问题的最佳方法可能是：</p><ul><li><p>在服务器端使用任何重定向状态码(<code>301..308</code>)正确地发出一个 <code>HTTP</code> 重定向，或者对你不再想托管或重定向到的页面发出 <code>404</code>。</p></li><li><p>通过在<code>&lt;head&gt;&lt;/head&gt;</code>部分添加 <code>&lt;link rel=&quot;canonical&quot; href=&quot;https://original_link&quot;/&gt;</code> 来通知搜索引擎有重复的页面。这比在服务器端做任何额外的工作更容易实现，但请记住，不是所有的 <code>web</code>爬虫都会喜欢它。</p></li></ul><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage" target="_blank" rel="noopener">https://stackabuse.com/javascript-how-to-redirect-to-another-webpage</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创造力是智力的乐趣。——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;通常，我们需要重定向用户到另一个网站或同一网站上的另一个网页。有几种重定向方法，包括 &lt;code&gt;JavaScript&lt;/code&gt; 
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中 Date &amp; 日期常用代码片段</title>
    <link href="https://cl9000.github.io/2021/06/03/Javascript%E4%B8%AD%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>https://cl9000.github.io/2021/06/03/Javascript%E4%B8%AD%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</id>
    <published>2021-06-03T09:03:35.000Z</published>
    <updated>2021-06-07T09:20:33.399Z</updated>
    
    <content type="html"><![CDATA[<p>To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&lt;芒格&gt;</p><h2><span id="date">Date</span></h2><p>在 <code>Web</code>开发中，会有很多我们需要与日期/时间值进行交互的实例，我们可能需要对日期和时间值进行各种操作，例如帖子发布后经过的时间，消息发布的时间交付等。<br>我们不能像向变量提供值那样不断地向程序提供时间/日期的值，我们需要一种机制来跟踪时间/日期的变化。<br><code>JavaScript</code> 有 <code>Date</code> 对象，它帮助我们跟踪时间/日期以及与日期和时间值交互的方法。<br>日期对象基于自 <strong>1970 年 1 月 1 日 UTC</strong> 以来经过的毫秒数。</p><p>在 JavaScript 中日期/时间不是字符串，它表示为 <code>Date</code> 对象，时间和日期没有单独的数据类型，时间和日期都使用 <code>Date</code> 对象表示。<br><code>Date</code> 对象有一些内置方法可以帮助从 <code>Date</code> 对象中提取时间和日期部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(dateString);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(time1); <span class="comment">// Thu Jan 01 1970 05:30:00 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><p>您可以使用 <code>Date.now()</code> 获取从 <strong>1970 年 1 月 1 日</strong> 到调用 <code>now()</code>方法的时间之间的毫秒数。</p><p>在下面找出 <code>Date()</code> 和 <code>new Date()</code> 之间的区别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);                 </span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530 (India Standard Time)   </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> now);           <span class="comment">// object </span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMonth());       <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strnow = <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(strnow);</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530 (India Standard Time) </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> strnow);        <span class="comment">//string</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(strnow.getMonth());</span><br><span class="line"><span class="comment">//Uncaught TypeError: strnow.getMonth is not a function</span></span><br></pre></td></tr></table></figure><p><code>Date</code> 对象提供了获取日期/时间值和设置日期/时间值的方法，这些方法解释如下。</p><h3><span id="date的-getter方法">Date()的 getter方法</span></h3><ol><li><code>getTimezoneOffset()</code>: 返回当前本地时区，本地时区以分钟为单位的 <code>+/-</code> 变化表示。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getTimezoneOffset());   <span class="comment">// -330</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>getDate()</code>: 返回一个表示日期的整数（1 到 31）。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getDate());             <span class="comment">// 14</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>getDay()</code>: 返回本地时间的星期几（0 到 6），0 代表星期日，不可更改</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getDay());</span><br></pre></td></tr></table></figure><ol start="4"><li><code>getMonth()</code>: 返回表示本地时间月份的整数，月份从0到11。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMonth());            <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ol start="5"><li><code>getFullYear()</code>：返回本地日期的年份，年份用4位数字表示。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getFullYear());         <span class="comment">// 2021</span></span><br></pre></td></tr></table></figure><ol start="6"><li><code>getHours()</code>：返回当地时间的当前小时。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getHours());            <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><ol start="7"><li><code>getMinutes()</code>：返回当地时间的当前分钟数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMinutes());          <span class="comment">// 29</span></span><br></pre></td></tr></table></figure><ol start="8"><li><code>getSeconds()</code>: 返回本地时间的当前秒数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getSeconds());          <span class="comment">// 44</span></span><br><span class="line"><span class="number">9.</span> getMilliseconds()：返回本地时间的毫秒数。</span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMilliseconds());     <span class="comment">// 251</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Current Time: Fri May 14 2021 20:29:55 GMT+0530</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getFullYear());         <span class="comment">// 2021</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMonth());            <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getDate());             <span class="comment">// 14</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getHours());            <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMinutes());          <span class="comment">// 29</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getSeconds());          <span class="comment">// 44</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMilliseconds());     <span class="comment">// 251</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getDay());              <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getTimezoneOffset());   <span class="comment">// -330</span></span><br></pre></td></tr></table></figure><p>以上所有方法都基于本地时间，您可以使用这些方法的 <code>UTC</code> 变体来处理基于 <code>UTC</code> 的时间。只需在 <code>get</code> 后添加 <code>UTC</code>，如 <code>getUTCDate()</code>、<code>getUTCDay()</code> 等。</p><h3><span id="date-的-setter-方法">Date() 的 Setter 方法</span></h3><ol><li><code>setDate()</code>: 设置月份中的日期。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)</span></span><br><span class="line">now.setDate(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">// Thu May 20 2021 21:28:29 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>setMonth()</code>：设置月份。您可以指定月份和日期。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setMonth(month, [date])</span><br><span class="line"><span class="comment">//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)       </span></span><br><span class="line">now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.setMonth(<span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">// Tue Dec 14 2021 21:29:51 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>setFullYear()</code>：设置年份。您可以指定日期、月份和年份，日期和月份是可选的。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setFullYear(year, [month], [date])</span><br><span class="line"><span class="comment">//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.setFullYear(<span class="number">2025</span>);</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">// Wed May 14 2025 21:30:20 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>setHours()</code>：设置小时。您可以指定可选的分钟、秒和毫秒以及小时。<code>setHours(hour, [min], [sec], [ms])</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.setHours(<span class="number">23</span>);</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">// Fri May 14 2021 23:31:59 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><ol start="5"><li><code>setMinutes()</code>：设置分钟。您可以指定秒和毫秒作为可选参数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setMinutes(min, [sec], [ms])</span><br><span class="line"><span class="comment">//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.setMinutes(<span class="number">00</span>);</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">// Fri May 14 2021 21:00:58 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><ol start="6"><li><code>setSeconds()</code>：设置秒数。您还可以指定毫秒作为可选参数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.setSeconds(<span class="number">00</span>);</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">// Fri May 14 2021 21:33:00 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><ol start="7"><li><code>setMilliseconds()</code>: 设置毫秒。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)</span></span><br><span class="line">now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.setMilliseconds(<span class="number">00</span>);</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">// Fri May 14 2021 21:34:32 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><p>您可以将字符串转换为 <code>Date</code> 对象，<code>Date</code> 对象的构造函数采用不同格式的字符串。下面给出了一些例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Fri, May 14 2021 21:00:00"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1);</span><br><span class="line"><span class="comment">//Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Fri, May 14 2021 21:00:00 UTC"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date2);</span><br><span class="line"><span class="comment">// Sat May 15 2021 02:30:00 GMT+0530 (India Standard Time)</span></span><br><span class="line"><span class="comment">// the output is in Indian standard time not in UTC, </span></span><br><span class="line"><span class="comment">// i.e. 5:30 is added to 21:00</span></span><br><span class="line"><span class="comment">// so we get 02:30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"14 May 2021 21:00:00 UTC+05:30"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(date3);</span><br><span class="line"><span class="comment">// Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">00</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date4);</span><br><span class="line"><span class="comment">// Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)</span></span><br><span class="line"><span class="comment">// Rememnber month starts from zero</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date5 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2021-05-14T21:00:00Z"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date5)</span><br><span class="line"><span class="comment">// Sat May 15 2021 02:30:00 GMT+0530 (India Standard Time)</span></span><br></pre></td></tr></table></figure><p><code>Date</code> 对象的输出是 <code>object</code>，我们可以将其转换为字符串格式，<code>Date</code> 对象有内置的方法。</p><ul><li><code>toString()</code> ：返回 <code>Date</code> 对象的字符串表示形式。</li><li><code>toLocalString()</code> ：以本地格式返回 <code>Date</code> 对象的字符串表示形式。</li><li><code>toTimeString()</code>：返回 <code>Date</code> 对象的时间部分。</li><li><code>toLocalTimeString()</code> ：以本地格式返回 <code>Date</code> 对象的时间部分。</li><li><code>toDateString()</code> ：返回 <code>Date</code> 对象的日期部分。</li><li><code>toLocalDateString()</code> ：以本地格式返回 <code>Date</code> 对象的日期部分。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> now.toString(), now.toString());</span><br><span class="line"><span class="comment">// string Fri May 14 2021 21:48:19 GMT+0530 (India Standard Time)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.toLocaleString());</span><br><span class="line"><span class="comment">// 5/14/2021, 9:48:19 PM</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.toDateString());</span><br><span class="line"><span class="comment">// Fri May 14 2021</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.toLocaleDateString());</span><br><span class="line"><span class="comment">// 5/14/2021</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.toTimeString());</span><br><span class="line"><span class="comment">// 21:48:19 GMT+0530 (India Standard Time)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(now.toLocaleTimeString());</span><br><span class="line"><span class="comment">// 9:48:19 PM</span></span><br></pre></td></tr></table></figure><h2><span id="日期和时间代码片段">日期和时间代码片段</span></h2><h3><span id="1-昨天日期">1. 昨天日期：</span></h3><p>方法一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find Yesterday Method 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getYesterday</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> yesterday = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    yesterday.setDate(yesterday.getDate() - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Today: <span class="subst">$&#123;today.toDateString()&#125;</span> Yesterday: <span class="subst">$&#123;yesterday.toDateString()&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">getYesterday();</span><br><span class="line"><span class="comment">//Today: Tue May 18 2021 Yesterday: Mon May 17 2021</span></span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find Yesterday Method 2 </span></span><br><span class="line"><span class="keyword">const</span> yesterday1 = (<span class="function"><span class="params">today1</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(today1.setDate(today1.getDate() - <span class="number">1</span>)))(<span class="keyword">new</span> <span class="built_in">Date</span>);</span><br><span class="line"><span class="built_in">console</span>.log(yesterday1);</span><br></pre></td></tr></table></figure><h3><span id="2-明天日期">2. 明天日期：</span></h3><p>方法一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find Tomorrow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTomorrow</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> tomorrow = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    tomorrow.setDate(tomorrow.getDate() + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Today: <span class="subst">$&#123;today.toDateString()&#125;</span> Tomorrow: <span class="subst">$&#123;tomorrow.toDateString()&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">getTomorrow();</span><br><span class="line"><span class="comment">//Today: Tue May 18 2021 Tomorrow: Wed May 19 2021</span></span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tomm1 = (<span class="function"><span class="params">today1</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(today1.setDate(today1.getDate() + <span class="number">1</span>)))(<span class="keyword">new</span> <span class="built_in">Date</span>);</span><br><span class="line"><span class="built_in">console</span>.log(tomm1);</span><br></pre></td></tr></table></figure><h3><span id="3-当前日-周几">3. 当前日 (周几)</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print Day</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printWeekday</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> names = [<span class="string">'Sunday'</span>, <span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>, <span class="string">'Saturday'</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Today is <span class="subst">$&#123;names[<span class="keyword">new</span> <span class="built_in">Date</span>().getDay()]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">printWeekday();</span><br><span class="line"><span class="comment">//Today is Tuesday</span></span><br></pre></td></tr></table></figure><h3><span id="4-当前月份">4. 当前月份</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print Month</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMonthName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> names = [<span class="string">'January'</span>, <span class="string">'February'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'May'</span>, <span class="string">'June'</span>,<span class="string">'July'</span>, <span class="string">'August'</span>, <span class="string">'September'</span>, <span class="string">'October'</span>,<span class="string">' November'</span>, <span class="string">'December'</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The month is <span class="subst">$&#123;names[<span class="keyword">new</span> <span class="built_in">Date</span>().getMonth()]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">printMonthName();</span><br><span class="line"><span class="comment">//The month is May</span></span><br></pre></td></tr></table></figure><h3><span id="5-每月第一天和最后一天">5. 每月第一天和最后一天</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get first and last day of month</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstLastDay</span>(<span class="params">year,month</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dateFirst = <span class="keyword">new</span> <span class="built_in">Date</span>(year,month<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> dateLast = <span class="keyword">new</span> <span class="built_in">Date</span>(year,month,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(dateFirst.toLocaleDateString(), dateLast.toLocaleDateString());</span><br><span class="line">&#125;</span><br><span class="line">firstLastDay(<span class="number">2021</span>, <span class="number">1</span>);   <span class="comment">// 1/1/2021 1/31/2021</span></span><br><span class="line">firstLastDay(<span class="number">2021</span>, <span class="number">2</span>);   <span class="comment">// 2/1/2021 2/28/2021</span></span><br><span class="line">firstLastDay(<span class="number">2021</span>, <span class="number">5</span>);   <span class="comment">// 5/1/2021 5/31/2021</span></span><br></pre></td></tr></table></figure><h3><span id="6-一个月的天数">6. 一个月的天数</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print Number of days in a month             </span></span><br><span class="line"><span class="comment">// Month starts from 0, so (year,month, 0) gives last day of month-1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDaysInMonth</span>(<span class="params">year,month</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> days = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month,<span class="number">0</span>).getDate();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Number of days in <span class="subst">$&#123;month&#125;</span>/<span class="subst">$&#123;year&#125;</span>: <span class="subst">$&#123;days&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">getDaysInMonth(<span class="number">2021</span>, <span class="number">1</span>);  <span class="comment">// Number of days in 1/2021: 31</span></span><br><span class="line">getDaysInMonth(<span class="number">2021</span>, <span class="number">2</span>);  <span class="comment">// Number of days in 2/2021: 28</span></span><br><span class="line">getDaysInMonth(<span class="number">2021</span>, <span class="number">5</span>);  <span class="comment">// Number of days in 5/2021: 31</span></span><br></pre></td></tr></table></figure><h3><span id="7以ampm格式打印时间">7.以AM/PM格式打印时间</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find AM or PM time in hh:mm:ss format</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">amOrpm</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> time = t.split(<span class="string">" "</span>)[<span class="number">0</span>].split(<span class="string">':'</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">parseInt</span>(time[<span class="number">0</span>]) &gt;= <span class="number">12</span>)&#123;</span><br><span class="line">         <span class="built_in">parseInt</span>(time[<span class="number">0</span>]) === <span class="number">12</span> ? <span class="number">12</span> : <span class="built_in">parseInt</span>(time[<span class="number">0</span>] % <span class="number">12</span>);</span><br><span class="line">         time.push(<span class="string">"PM"</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         time.push(<span class="string">"AM"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;time[<span class="number">0</span>]&#125;</span>:<span class="subst">$&#123;time[<span class="number">1</span>]&#125;</span>:<span class="subst">$&#123;time[<span class="number">2</span>]&#125;</span> <span class="subst">$&#123;time[<span class="number">3</span>]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">amOrpm(<span class="keyword">new</span> <span class="built_in">Date</span>().toTimeString()); <span class="comment">// 17:31:07 PM</span></span><br></pre></td></tr></table></figure><h3><span id="8-计算两个日期之间的天数">8. 计算两个日期之间的天数</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calculate number of days between two dates</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noDates</span>(<span class="params">first, last</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> difference = <span class="built_in">Math</span>.ceil((last - first) / (<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The number of days between <span class="subst">$&#123;first.toLocaleDateString()&#125;</span> and <span class="subst">$&#123;last.toLocaleDateString()&#125;</span> is <span class="subst">$&#123;<span class="built_in">Math</span>.abs(difference)&#125;</span> days`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noDates(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-1-1'</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2021-05-15'</span>))</span><br><span class="line"><span class="comment">//The number of days between 1/1/2018 and 5/15/2021 is 1231 days</span></span><br></pre></td></tr></table></figure><h3><span id="9-计算两个日期之间的月数">9. 计算两个日期之间的月数</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calculate number of months between two dates</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numMonths</span>(<span class="params">first, last</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> yearToMonths = [last.getFullYear() - first.getFullYear()] * <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">let</span> months  = [yearToMonths + (last.getMonth() + <span class="number">1</span>)] - (first.getMonth() + <span class="number">1</span>); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Number of months between <span class="subst">$&#123;first.toLocaleDateString&#125;</span> and </span></span><br><span class="line"><span class="string">            <span class="subst">$&#123;last.toLocaleDateString&#125;</span> is <span class="subst">$&#123;months&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">numMonths(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-05-21'</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-05-21'</span>));</span><br><span class="line"><span class="comment">// Number of months between 5/21/2018 and 5/21/2021 is 36</span></span><br></pre></td></tr></table></figure><h2><span id="参考">参考</span></h2><ul><li><a href="https://dev.to/kiranrajvjd/javascript-useful-code-snippets-part1-date-and-time-25al" target="_blank" rel="noopener">https://dev.to/kiranrajvjd/javascript-useful-code-snippets-part1-date-and-time-25al</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&amp;lt;芒格&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;date&quot;&gt;Date&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;Web
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>EPEL源-是什么?</title>
    <link href="https://cl9000.github.io/2021/06/02/EPEL%E6%BA%90-%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://cl9000.github.io/2021/06/02/EPEL%E6%BA%90-%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2021-06-02T08:36:12.000Z</published>
    <updated>2021-06-02T08:37:11.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://blog.csdn.net/u011341352/article/details/82943871" target="_blank" rel="noopener">https://blog.csdn.net/u011341352/article/details/82943871</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">EPEL源-是什么?为什么安装？</span><br><span class="line"> </span><br><span class="line"> EPEL (Extra Packages <span class="keyword">for</span> Enterprise Linux)是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux.</span><br><span class="line"> </span><br><span class="line">使用很简单：</span><br><span class="line"><span class="number">1.</span> 首先需要安装一个叫”epel-release”的软件包，这个软件包会自动配置yum的软件仓库。当然你也可以不安装这个包，自己配置软件仓库也是一样的。</span><br><span class="line">#用于RHEL5系列</span><br><span class="line">wget http:<span class="comment">//download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm</span></span><br><span class="line">rpm -ivh epel-release<span class="number">-5</span><span class="number">-4.n</span>oarch.rpm</span><br><span class="line">#用于RHEL6系列</span><br><span class="line">wget http:<span class="comment">//download.fedoraproject.org/pub/epel/6/i386/epel-release-6-5.noarch.rpm</span></span><br><span class="line">rpm -ivh epel-release<span class="number">-6</span><span class="number">-5.n</span>oarch.rpm</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 安装完成之后你就可以直接使用yum来安装额外的软件包了</span><br><span class="line">yum clean all</span><br><span class="line"> </span><br><span class="line">yum makecache</span><br><span class="line">yum install nginx pure-ftpd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span>直接自己手工添加软件仓库配置文件</span><br><span class="line">vi /etc/yum.repos.d/epel.repo</span><br><span class="line"> </span><br><span class="line">[epel]</span><br><span class="line">name=epel</span><br><span class="line">mirrorlist=http:<span class="comment">//mirrors.fedoraproject.org/mirrorlist?repo=epel-releasever&amp;arch=releasever&amp;arch=basearch</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">CentOS6<span class="number">.5</span>添加阿里云的EPEL源</span><br><span class="line">yum localinstall --nogpgcheck http:<span class="comment">//mirrors.aliyun.com/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></span><br><span class="line"> </span><br><span class="line">安装阿里云EPEL源</span><br><span class="line"><span class="number">1</span>、首先卸载以前装的epel以免影响</span><br><span class="line">rpm -e epel-release</span><br><span class="line"><span class="number">2</span>、 下载阿里提供的epel</span><br><span class="line">wget -P /etc/yum.repos.d/ http:<span class="comment">//mirrors.aliyun.com/repo/epel-6.repo</span></span><br><span class="line"><span class="number">3</span>、yum clean all</span><br><span class="line"><span class="number">4</span>、yum makecache</span><br><span class="line"> </span><br><span class="line">阿里云源安装示例：</span><br><span class="line"><span class="number">1</span>、备份(如有配置其他epel源)</span><br><span class="line">mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup</span><br><span class="line">mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>、下载新repo 到/etc/yum.repos.d/</span><br><span class="line">epel(RHEL <span class="number">7</span>)</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http:<span class="comment">//mirrors.aliyun.com/repo/epel-7.repo</span></span><br><span class="line"> </span><br><span class="line">epel(RHEL <span class="number">6</span>)</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http:<span class="comment">//mirrors.aliyun.com/repo/epel-6.repo</span></span><br><span class="line"> </span><br><span class="line">epel(RHEL <span class="number">5</span>)</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http:<span class="comment">//mirrors.aliyun.com/repo/epel-5.repo</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">来源：https:<span class="comment">//www.cnblogs.com/fps2tao/p/7580188.html</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/u011341352/article/details/82943871&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.ne
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://cl9000.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://cl9000.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 JavaWeb 运行环境镜像(JDK7-Tomcat7)</title>
    <link href="https://cl9000.github.io/2021/05/28/Docker%E6%90%AD%E5%BB%BAJavaWeb%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83-JDK7-Tomcat7/"/>
    <id>https://cl9000.github.io/2021/05/28/Docker%E6%90%AD%E5%BB%BAJavaWeb%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83-JDK7-Tomcat7/</id>
    <published>2021-05-28T02:28:35.000Z</published>
    <updated>2021-05-28T09:09:01.120Z</updated>
    
    <content type="html"><![CDATA[<p>每天做一件自己害怕的事。——&lt;埃莉诺·罗斯福&gt;</p><p>Docker 手动方式 搭建 JavaWeb 运行环境镜像(JDK7-Tomcat7)</p><h2><span id="前提条件">前提条件</span></h2><p>安装Docker。<br>下面示例以在 Mac 上的 Docker 演示，以 <strong>CentOS</strong> 为例</p><h2><span id="手动构建-docker-镜像方式">手动构建 Docker 镜像方式</span></h2><h3><span id="下载镜像">下载镜像</span></h3><p>下载官方 CentOS 镜像 <a href="https://hub.docker.com/_/centos" target="_blank" rel="noopener">官方 CentOS 镜像 hub.docker</a>，<br>找到 <strong>Tag</strong>，安装指定版本，复制安装镜像命令，例如 <code>$ docker pull centos:7</code><br>执行完毕，使用以下命令查看本地所有的镜像：<br><code>$ docker images</code><br>结果如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              centos7             <span class="number">8652</span>b9f0cb4c        <span class="number">6</span> months ago        <span class="number">204</span>MB</span><br></pre></td></tr></table></figure><p>如果输出以上，即代表下载成功，我们就可以使用该镜像了。下面我们启动容器</p><h3><span id="软件下载地址">软件下载地址</span></h3><p>（推荐官网，下面也是官网下载转存可直接使用）</p><blockquote><p>【apache-tomcat-7.0.109.tar.gz】链接: <a href="https://pan.baidu.com/s/1zbQFvCjdCj6af8E3PQEhFg" target="_blank" rel="noopener">https://pan.baidu.com/s/1zbQFvCjdCj6af8E3PQEhFg</a> 密码:uw1d<br>【jdk7u79linuxx64.tar.gz】链接:<a href="https://pan.baidu.com/s/1QjXLbtx-eWKYPylkd7aSbQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1QjXLbtx-eWKYPylkd7aSbQ</a> 密码:xp49</p></blockquote><p>并在本机创建 <code>~/Desktop/docker/software/</code> 目录，将下载JDK + Tomcat 压缩包文件放入目录，以便后面挂载</p><h3><span id="启动容器">启动容器</span></h3><p>容器是在镜像的基础上来运行的，容器启动了，我们就可以登录到容器中，安装自己所需的软件或应用程序。<br>使用以下命令即可启动容器：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -v ~/Desktop<span class="meta-keyword">/docker/</span>software/:<span class="meta-keyword">/mnt/</span>software/ <span class="number">8652</span>b9f0cb4c（纯净centos容器ID） <span class="meta-keyword">/bin/</span>bash</span><br><span class="line"></span><br><span class="line">命令分解</span><br><span class="line">docker run <span class="params">&lt;相关参数&gt;</span> <span class="params">&lt;镜像 ID&gt;</span> <span class="params">&lt;初始命令&gt;</span></span><br><span class="line">相关参数包括：</span><br><span class="line">-i：表示以“交互模式”运行容器</span><br><span class="line">-t：表示容器启动后会进入其命令行</span><br><span class="line">-v：表示需要将本地哪个目录挂载到容器中，格式：-v <span class="params">&lt;宿主机目录&gt;</span>:<span class="params">&lt;容器目录&gt;</span></span><br></pre></td></tr></table></figure><p>假设我们的所有安装程序都放在了宿主机的<code>/docker/software/</code>目录下，现在需要将其挂载到容器的<code>/mnt/software/</code>目录下。</p><p>需要说明的是，不一定要使用 <strong>镜像 ID</strong>，也可以使用 <strong>仓库名:标签名</strong>，例如：<code>centos:centos7</code>。</p><p>初始命令表示一旦容器启动，需要运行的命令，此时使用 <code>/bin/bash</code>，表示什么也不做，只需进入命令行即可。<br>进入命令行查看：<code>$ ls -ll</code></p><h3><span id="安装软件-jdk-tomcat">安装软件 JDK + Tomcat</span></h3><p>为了搭建 <code>Java Web</code> 运行环境，我们需要安装 <code>JDK</code> 与 <code>Tomcat</code>。</p><h4><span id="软件下载地址推荐官网下面也是官网下载转存可直接使用参考上面软件现在地址并存至本机指定目录">软件下载地址（推荐官网，下面也是官网下载转存可直接使用，参考上面软件现在地址，并存至本机指定目录）</span></h4><p>下面的（<code>exit</code>命令前）过程均在 <strong>容器内部</strong> 进行。我们不妨选择 <code>/opt/</code> 目录作为安装目录，首先需要通过 <code>$ cd /opt/</code> 命令进入该目录。</p><h4><span id="jdk">JDK</span></h4><p>使用命令 解压 JDK 程序包 并重命名 JDK 目录：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf /mnt/software/jdk7u79linuxx64.tar.gz -C . &amp;&amp; mv jdk1<span class="number">.7</span><span class="number">.0</span>_79/ jdk/</span><br></pre></td></tr></table></figure><h4><span id="tomcat">Tomcat</span></h4><p>使用命令 解压 Tomcat 程序包 并重命名 Tomcat 目录：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf /mnt/software/apache-tomcat<span class="number">-7.0</span><span class="number">.109</span>.tar.gz -C . &amp;&amp; mv apache-tomcat<span class="number">-7.0</span><span class="number">.109</span>/ tomcat/</span><br></pre></td></tr></table></figure><h4><span id="设置环境变量">设置环境变量</span></h4><p>编辑 <code>.bashrc</code> 文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure><p>然后，在文件末尾添加如下配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/opt/jdk</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME</span><br></pre></td></tr></table></figure><p>使用 <code>source</code> 命令，让环境变量立马生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4><span id="编写运行脚本">编写运行脚本</span></h4><p>我们需要编写一个运行脚本，当启动容器时，运行该脚本，启动 Tomcat，具体过程如下：</p><p>创建运行脚本命令： <strong>&lt;这里容易出错了！！！在 ~目录下执行&gt;</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /root/<span class="keyword">run</span>.<span class="bash">sh</span></span><br></pre></td></tr></table></figure><p>脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">sh /opt/tomcat/bin/catalina.sh run</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 这里必须先加载环境变量，然后使用 Tomcat 的运行脚本来启动 Tomcat 服务。<br>为运行脚本添加执行权限：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -ll</span><br><span class="line">chmod u+x /root/run.sh</span><br><span class="line">ls -ll</span><br></pre></td></tr></table></figure><h4><span id="退出容器-exit">退出容器 exit</span></h4><p>当以上步骤全部完成后，可使用 <code>exit</code> 命令，退出容器。</p><p>随后，可使用如下命令查看正在运行的容器：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><p>此时，您应该看不到任何正在运行的程序，因为刚才已经使用 <code>exit</code> 命令退出的容器，此时容器处于停止状态，可使用如下命令查看所有容器：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps -a</span></span><br></pre></td></tr></table></figure><p>输出如下内容：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                        PORTS               NAMES</span><br><span class="line"><span class="number">2</span>abcd201f871        <span class="number">8652</span>b9f0cb4c        <span class="string">"/bin/bash"</span>         <span class="number">9</span> minutes ago       Exited (<span class="number">127</span>) <span class="number">13</span> seconds ago                       adoring_ellis</span><br></pre></td></tr></table></figure><p>记住以上 <code>CONTAINER ID（容器 ID）</code>，随后我们将通过该容器，创建一个可运行 Java Web 的镜像。</p><h3><span id="创建-java-web-镜像">创建 Java Web 镜像</span></h3><p>使用以下命令，根据某个<code>“容器 ID”</code>来创建一个新的“镜像”：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit <span class="number">8652</span>b9f0cb4c cl9000/javaweb:v1</span><br></pre></td></tr></table></figure><p>该容器的 ID 是 <code>57c312bbaad1</code>，所创建的镜像名是 <code>cl9000/javaweb:v1</code>，随后可使用镜像来启动 Java Web 容器。</p><h3><span id="启动-java-web-容器">启动 Java Web 容器</span></h3><p>首先使用 <code>$ docker images</code>命令，查看当前所有的镜像：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">cl9000/javaweb      v1                  <span class="number">1</span>c8483e68cf9        <span class="number">9</span> seconds ago       <span class="number">525</span>MB</span><br><span class="line">centos              centos7             <span class="number">8652</span>b9f0cb4c        <span class="number">6</span> months ago        <span class="number">204</span>MB</span><br></pre></td></tr></table></figure><p>可见，此时已经看到了最新创建的镜像 <code>cl9000/javaweb:v1</code>，其镜像 ID 是 <code>1c8483e68cf9</code>。<br>我们可以通过“镜像名”或“镜像 ID”来启动容器，与上次启动容器不同的是，我们现在不再进入容器的命令行，而是直接启动容器内部的 Tomcat 服务。此时，需要使用以下命令：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">58080</span>:<span class="number">8080</span> --name javaweb cl9000/javaweb:v1 /root/run.sh</span><br><span class="line">稍作解释：</span><br><span class="line"></span><br><span class="line">-d：表示以“守护模式”执行 /root/run.sh 脚本，此时 Tomcat 控制台不会出现在输出终端上。</span><br><span class="line">-p：表示宿主机与容器的端口映射，此时将容器内部的 <span class="number">8080</span> 端口映射为宿主机的 <span class="number">58080</span> 端口，这样就向外界暴露了 <span class="number">58080</span> 端口，可通过 Docker 网桥来访问容器内部的 <span class="number">8080</span> 端口了。</span><br><span class="line">--name：表示新容器名称，用一个有意义的名称命名即可。</span><br></pre></td></tr></table></figure><blockquote><p>关于 Docker 网桥的内容，需要补充说明一下。<br>实际上 Docker 在宿主机与容器之间，搭建了一座网络通信的桥梁，我们可通过宿主机 IP 地址与端口号来映射容器内部的 IP 地址与端口号</p></blockquote><p>当运行以上命令后，会立即输出一长串 <strong>容器 ID</strong>，我们可通过 <code>$ docker ps</code> 命令来查看当前正在运行的容器，输出如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line"><span class="number">51</span>b562e7833b        cl9000/javaweb:v1   <span class="string">"/root/run.sh"</span>      <span class="number">13</span> seconds ago      Up <span class="number">12</span> seconds       <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">58080</span>-&gt;<span class="number">8080</span>/tcp   javaweb</span><br></pre></td></tr></table></figure><h3><span id="验证">验证</span></h3><p>在浏览器中，输入以下地址，即可访问 Tomcat 首页：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost:58080/</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> 这里使用的是<strong>宿主机的 IP</strong> 地址，与对外暴露的端口号 58080，它映射容器内部的端口号 8080。</p></blockquote><h2><span id="使用-dockerfile-构建镜像-方式">使用 Dockerfile 构建镜像 方式</span></h2><p>我们在Mac本机桌面新建 <code>/docker/Docker/</code>目录，编写一个 <strong>Dockerfile</strong> 文件，随后使用 <code>$ docker build</code> 命令也可完成以上所有的手工构建操作。<br>将下载的 <code>jdk+tomcat</code>压缩包， 也复制至于 <code>Dockerfile</code> 同级目录</p><h3><span id="dockerfile-文件脚本">Dockerfile 文件脚本</span></h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#################################################################################</span><br><span class="line"># 指定基础镜像，并且必须是第一条指令</span><br><span class="line">FROM centos:centos7</span><br><span class="line"></span><br><span class="line"># 指明该镜像的作者和其电子邮件</span><br><span class="line">MAINTAINER cl9000 <span class="string">"cl9000@126.com"</span></span><br><span class="line"></span><br><span class="line"># 在构建镜像时，指定镜像的工作目录，之后的命令都是基于此工作目录，如果不存在，则会创建目录</span><br><span class="line">#WORKDIR /opt/docker</span><br><span class="line"></span><br><span class="line"># 安装 wget</span><br><span class="line">#RUN yum install -y wget</span><br><span class="line"></span><br><span class="line"># 一个复制命令，把jdk安装文件复制到镜像中，语法：ADD &lt;src&gt;... &lt;dest&gt;,注意：jdk*.tar.gz使用的是相对路径</span><br><span class="line"># 安装 JDK</span><br><span class="line"># 第一种写法 jdk和Dockerfile同级目录就使用下路径，否者使用相对路径</span><br><span class="line">ADD jdk7u79linuxx64.tar.gz /opt/docker/</span><br><span class="line">RUN mv /opt/docker/jdk1<span class="number">.7</span><span class="number">.0</span>_79/ /opt/docker/jdk1<span class="number">.7</span>/</span><br><span class="line">#第二种写法</span><br><span class="line">#RUN tar xzf jdk7u79linuxx64.tar.gz -C /opt/docker/jdk1<span class="number">.7</span>/</span><br><span class="line"># &amp;&amp; rm -rf jdk7u79linuxx64.tar.gz</span><br><span class="line"></span><br><span class="line"># 安装 tomcat </span><br><span class="line">ADD apache-tomcat<span class="number">-7.0</span><span class="number">.109</span>.tar.gz /opt/docker/</span><br><span class="line">RUN mv /opt/docker/apache-tomcat<span class="number">-7.0</span><span class="number">.109</span>/ /opt/docker/tomcat7/</span><br><span class="line"></span><br><span class="line"># 配置环境变量</span><br><span class="line">ENV JAVA_HOME=/opt/docker/jdk1<span class="number">.7</span></span><br><span class="line">ENV CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"># 开启内部服务端口</span><br><span class="line">#EXPOSE <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"># 启动tomcat服务器</span><br><span class="line">CMD [<span class="string">"./opt/docker/tomcat7/bin/catalina.sh"</span>,<span class="string">"run"</span>] </span><br><span class="line">#&amp;&amp; tail -f /opt/docker/tomcat7/logs/catalina.out</span><br><span class="line"></span><br><span class="line"># 容器启动时需要执行的命令</span><br><span class="line">#CMD [<span class="string">"java"</span>,<span class="string">"-version"</span>]</span><br><span class="line"></span><br><span class="line">#################################################################################</span><br></pre></td></tr></table></figure><h3><span id="使用-dockerfile-构建-相关命令">使用 Dockerfile 构建 - 相关命令</span></h3><h4><span id="构建">构建</span></h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t cl9000/javaweb2:<span class="built_in">v1</span> .</span><br></pre></td></tr></table></figure><p><code>.</code> 表示 <code>Dockerfile</code> 在当前文件夹下，也可使用绝对路径<code>（/path/Dockerfile）</code>来表示</p><h4><span id="运行容器">运行容器</span></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -it  -p 58081:8080 <span class="attribute">--name</span>=javaweb-test cl9000/javaweb2:v1</span><br></pre></td></tr></table></figure><h4><span id="浏览器验证">浏览器验证</span></h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost:58081/   正常访问 Tomcat 即可</span></span><br></pre></td></tr></table></figure><h2><span id="手动构建镜像-相关命令汇总">手动构建镜像 - 相关命令汇总</span></h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#################################################################################</span><br><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br><span class="line">docker images</span><br><span class="line">docker run -i -t -v ~/Desktop/docker/software/:/mnt/software/ <span class="number">8652</span>b9f0cb4c（纯净centos容器ID） /bin/bash</span><br><span class="line">ls -ll</span><br><span class="line">cd opt/</span><br><span class="line">tar -zxf /mnt/software/jdk7u79linuxx64.tar.gz -C .</span><br><span class="line">mv jdk1<span class="number">.7</span><span class="number">.0</span>_79/ jdk/</span><br><span class="line">tar -zxf /mnt/software/apache-tomcat<span class="number">-7.0</span><span class="number">.109</span>.tar.gz -C .</span><br><span class="line">mv apache-tomcat<span class="number">-7.0</span><span class="number">.109</span>/ tomcat/</span><br><span class="line">vi ~/.bashrc</span><br><span class="line"> <span class="keyword">export</span> JAVA_HOME=/opt/jdk</span><br><span class="line"> <span class="keyword">export</span> PATH=$PATH:$JAVA_HOME</span><br><span class="line">source ~/.bashrc</span><br><span class="line">vi /root/run.sh  &lt;这里容易出错了！！！在 ~目录下执行&gt;</span><br><span class="line">  #!/bin/bash</span><br><span class="line">  source ~/.bashrc</span><br><span class="line">  sh /opt/tomcat/bin/catalina.sh run</span><br><span class="line">chmod u+x /root/run.sh</span><br><span class="line">exit</span><br><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br><span class="line">docker commit <span class="number">8652</span>b9f0cb4c cl9000/javaweb:v1</span><br><span class="line">docker images</span><br><span class="line">docker run -d -p <span class="number">58080</span>:<span class="number">8080</span> --name javaweb cl9000/javaweb:v1 /root/run.sh</span><br><span class="line">docker ps</span><br><span class="line">#################################################################################</span><br></pre></td></tr></table></figure><h2><span id="相关资源">相关资源</span></h2><p>【apache-tomcat-7.0.109.tar.gz】链接: <a href="https://pan.baidu.com/s/1zbQFvCjdCj6af8E3PQEhFg" target="_blank" rel="noopener">https://pan.baidu.com/s/1zbQFvCjdCj6af8E3PQEhFg</a> 密码:uw1d<br>【jdk7u79linuxx64.tar.gz】链接:<a href="https://pan.baidu.com/s/1QjXLbtx-eWKYPylkd7aSbQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1QjXLbtx-eWKYPylkd7aSbQ</a> 密码:xp49</p><h2><span id="相关命令行图">相关命令行图</span></h2><h4><span id="手动构建图">手动构建图</span></h4><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/docker_jdk7_tomcat7_1.png" alt="docker_jdk7_tomcat7_1"><br><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/docker_jdk7_tomcat7_2.png" alt="docker_jdk7_tomcat7_2"></p><h4><span id="dockerfile构建图">Dockerfile构建图</span></h4><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/docker_Dockerfile_1.png" alt="docker_Dockerfile_1"></p><h2><span id="参考">参考</span></h2><ul><li><a href="https://blog.csdn.net/weixin_48182198/article/details/106645330" target="_blank" rel="noopener">手动构建 https://blog.csdn.net/weixin_48182198/article/details/106645330</a></li><li><a href="https://blog.csdn.net/yjk13703623757/article/details/68944549?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control" target="_blank" rel="noopener">Dockerfile构建 - https://blog.csdn.net/yjk13703623757/article/details/68944549?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></li><li><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">Oracle - https://www.oracle.com/java/technologies/javase-downloads.html</a></li><li><a href="https://hub.docker.com" target="_blank" rel="noopener">DockerHub - https://hub.docker.com</a></li></ul><h2><span id="docker资源">Docker资源</span></h2><h4><span id="docker官方英文资源">Docker官方英文资源：</span></h4><p>docker 官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a><br>Docker windows入门：<a href="https://docs.docker.com/windows/" target="_blank" rel="noopener">https://docs.docker.com/windows/</a><br>Docker Linux 入门：<a href="https://docs.docker.com/linux/" target="_blank" rel="noopener">https://docs.docker.com/linux/</a><br>Docker mac 入门：<a href="https://docs.docker.com/mac/" target="_blank" rel="noopener">https://docs.docker.com/mac/</a><br>Docker 用户指引：<a href="https://docs.docker.com/engine/userguide/" target="_blank" rel="noopener">https://docs.docker.com/engine/userguide/</a><br>Docker 官方博客：<a href="http://blog.docker.com/" target="_blank" rel="noopener">http://blog.docker.com/</a><br>Docker Hub: <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a><br>Docker开源： <a href="https://www.docker.com/open-source" target="_blank" rel="noopener">https://www.docker.com/open-source</a></p><h4><span id="docker中文资源">Docker中文资源：</span></h4><p>Docker中文网站：<a href="http://www.docker.org.cn" target="_blank" rel="noopener">http://www.docker.org.cn</a><br>Docker入门教程: <a href="http://www.docker.org.cn/book/docker.html" target="_blank" rel="noopener">http://www.docker.org.cn/book/docker.html</a><br>Docker安装手册：<a href="http://www.docker.org.cn/book/install.html" target="_blank" rel="noopener">http://www.docker.org.cn/book/install.html</a><br>一小时Docker教程 ：<a href="https://blog.csphere.cn/archives/22" target="_blank" rel="noopener">https://blog.csphere.cn/archives/22</a><br>Docker纸质书：<a href="http://www.docker.org.cn/dockershuji.html" target="_blank" rel="noopener">http://www.docker.org.cn/dockershuji.html</a><br>DockerPPT：<a href="http://www.docker.org.cn/dockerppt.html" target="_blank" rel="noopener">http://www.docker.org.cn/dockerppt.html</a></p><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每天做一件自己害怕的事。——&amp;lt;埃莉诺·罗斯福&amp;gt;&lt;/p&gt;
&lt;p&gt;Docker 手动方式 搭建 JavaWeb 运行环境镜像(JDK7-Tomcat7)&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;前提条件&quot;&gt;前提条件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;安装Docker。&lt;br
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://cl9000.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://cl9000.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中拆分字符串</title>
    <link href="https://cl9000.github.io/2021/04/04/Javascript%E4%B8%AD%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://cl9000.github.io/2021/04/04/Javascript%E4%B8%AD%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-04-04T09:42:09.000Z</published>
    <updated>2021-06-09T09:47:32.060Z</updated>
    
    <content type="html"><![CDATA[<p>创造性就是发明、实验、成长、冒险、犯规、犯错和享受乐趣。 ——&lt;玛丽·卢·库克&gt;</p><h2><span id="介绍">介绍</span></h2><p>JavaScript 有很多有用的内置字符串操作方法，其中之一就是<code>split()</code>方法。</p><p>在本文中，我们将仔细研究 <code>split()</code> 方法以及如何将其与正则表达式结合使用以按照我们想要的方式拆分长字符串。</p><h2><span id="javascript-的split方法">JavaScript 的split()方法</span></h2><p>当 <code>split(delimiter, limit)</code>方法用于字符串时，它返回一个子字符串数组，并使用 <code>delimiter</code> 参数的值作为分隔符。<code>delimiter</code>参数还可以指定为正则表达式，然后将通过使用原始字符串搜索找到匹配指定表达式的分隔符。</p><p>此外，我们可以指定可选参数 <code>limit</code>，它指定我们想要的结果子字符串数组中有多少元素。<code>limit=2</code> 例如，设置将产生一个数组，其中包含原始字符串中由分隔符分隔的前两个子字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"JavaScript is the best programming language!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = str.split(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words);</span><br><span class="line"><span class="comment">// 这里，字符串将被分解为每个新单词：</span></span><br><span class="line"><span class="comment">// ["JavaScript", "is", "the", "best", "programming", "language!" ]</span></span><br></pre></td></tr></table></figure><p>如果我们将分隔符设置为其他内容，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chars = str.split(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chars);</span><br><span class="line"><span class="comment">// 字符串将在每个字符上分解：</span></span><br><span class="line"><span class="comment">// ["J", "a", "v", "a", "S", "c", "r", "i", "p", "t", " ", "i", "s", " ", "t", "h", "e", " ", "b", "e", "s", "t", " ", "p", "r", "o", "g", "r", "a", "m", "m", "i", "n", "g", " ", "l", "a", "n", "g", "u", "a", "g", "e", "!"]</span></span><br></pre></td></tr></table></figure><h2><span id="使用-split-方法的正则表达式">使用 split() 方法的正则表达式</span></h2><p>现在我们已经熟悉了 <code>split()</code> 方法的使用，让我们更上一层楼，并在组合中引入正则表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">`The Answer to the Ultimate Question of Life, the Universe, and Everything is 42. Forty two. That's all there is.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Split by words</span></span><br><span class="line"><span class="keyword">const</span> words = paragraph.split(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Split by sentences</span></span><br><span class="line"><span class="keyword">const</span> sentences = paragraph.split(<span class="regexp">/[!?.]/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sentences[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Split all characters, with a limit of 2</span></span><br><span class="line"><span class="keyword">const</span> firstTwoChars = paragraph.split(<span class="string">""</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(firstTwoChars);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Split and reverse</span></span><br><span class="line"><span class="keyword">const</span> reverse = paragraph.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reverse);</span><br></pre></td></tr></table></figure><p><strong>结果 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">to</span><br><span class="line"> Forty two</span><br><span class="line">[<span class="string">"T"</span>, <span class="string">"h"</span> ]</span><br><span class="line"><span class="number">.24</span> si gnihtyrevE dna ,esrevinU eht ,efiL fo noitseuQ etamitlU eht ot rewsnA ehT</span><br></pre></td></tr></table></figure><p>在第二个例子中，我们传递一个正则表达式作为 <code>split()</code> 方法的参数。</p><ul><li><code>/[!?.]/</code> 代表一个字符集 -  <code>!</code> 或 <code>?</code>或 <code>.</code></li></ul><p>简而言之，我们在任何指定的字符处拆分字符串。</p><p>在第三个示例中，我们将 <code>2</code> 作为第二个参数传递，将结果子字符串数组限制为两个元素。</p><p>在最后一个示例中，我们使用内置 <code>reverse()</code>方法反转字符串。因为<code>reverse()</code>是数组方法，我们先将原始字符串拆分为单个字符的数组，通过使用该 <code>split(&quot;&quot;)</code>方法，然后再使用<code>reverse()</code>。</p><p>最后，我们可以 <code>join()</code>将结果从字符数组中创建一个反向字符串。</p><h2><span id="总结">总结</span></h2><p>在本教程中，我们快速了解了如何在 vanilla JavaScript 中拆分字符串。我们已经讨论了内置 <code>split()</code> 方法，以及如何将它与正则表达式一起使用。</p><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创造性就是发明、实验、成长、冒险、犯规、犯错和享受乐趣。 ——&amp;lt;玛丽·卢·库克&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript 有很多有用的内置字符串操作方法，其中之一就是&lt;code&gt;split()&lt;/co
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中检查字符串是否以子字符串开头</title>
    <link href="https://cl9000.github.io/2021/04/04/Javascript%E4%B8%AD%E6%A3%80%E6%9F%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%BB%A5%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%80%E5%A4%B4/"/>
    <id>https://cl9000.github.io/2021/04/04/Javascript%E4%B8%AD%E6%A3%80%E6%9F%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%BB%A5%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%80%E5%A4%B4/</id>
    <published>2021-04-04T09:34:54.000Z</published>
    <updated>2021-06-09T09:41:30.043Z</updated>
    
    <content type="html"><![CDATA[<p>在事情成功之前，一切总看似不可能。——&lt;纳尔逊·曼德拉&gt;</p><h2><span id="介绍">介绍</span></h2><p>在本教程中，我们将看看如何在 JavaScript 中检查字符串是否以子字符串开头。</p><p>这可以通过 <code>startsWith()</code> 方法或正则表达式轻松实现。</p><h2><span id="使用startswith检查字符串是否以另一个字符串开头">使用startsWith()检查字符串是否以另一个字符串开头</span></h2><p><code>startsWith(searchString[, position])</code> 方法返回一个布尔值，指示字符串是否以指定的字符开头 <code>searchString</code>。我们也可以选择使用 <code>position</code> 参数来指定开始搜索的字符串位置。</p><p>我们看看这个：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"This is an example for startsWith() method"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">"This"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">"is"</span>, <span class="number">2</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在第一个示例中，我们正在检查<code>str</code>字符串是否以<code>&quot;This&quot;</code>开头.</p><p>在第二个示例中，我们检查<code>str</code>是否以 <code>&quot;is&quot;</code> 开头，是否从索引 <code>2</code>（即第 <code>3</code>个字符）开始搜索。</p><h2><span id="使用正则表达式检查字符串是否以另一个字符串开头">使用正则表达式检查字符串是否以另一个字符串开头</span></h2><p>正则表达式真的很强大，可以让我们匹配各种模式。这对他们来说是一个很好的用例，因为我们本质上是在检查模式 - 如果字符串以子字符串开头。</p><p><code>regexObj.test(reg)</code>方法尝试将指定的正则表达式<code>reg</code>与原始字符串匹配并返回一个<code>boolean</code>值，该值指示是否找到匹配项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regEx = <span class="regexp">/^he/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regEx.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在这种方法中，我们检查<code>regEx</code>是否出现在 <code>str</code> string 中。<code>^</code>元字符表示所指定的模式 <code>he</code> 必须是位于行的开头。因此，正则表达式 - <code>/^he/</code> 检查指定的行是否以 <code>he</code> substring 开头。</p><h2><span id="总结">总结</span></h2><p>在本教程中，我们研究了如何使用 <code>startsWith()</code>方法以及正则表达式检查字符串是否以 vanilla JavaScript 中的子字符串开头</p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/javascript-check-if-string-starts-with-substring" target="_blank" rel="noopener">https://stackabuse.com/javascript-check-if-string-starts-with-substring</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在事情成功之前，一切总看似不可能。——&amp;lt;纳尔逊·曼德拉&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在本教程中，我们将看看如何在 JavaScript 中检查字符串是否以子字符串开头。&lt;/p&gt;
&lt;p&gt;这可以通过 &lt;code&gt;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中将数组拆分为偶数块</title>
    <link href="https://cl9000.github.io/2021/03/26/Javascript%E4%B8%AD%E5%B0%86%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86%E4%B8%BA%E5%81%B6%E6%95%B0%E5%9D%97/"/>
    <id>https://cl9000.github.io/2021/03/26/Javascript%E4%B8%AD%E5%B0%86%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86%E4%B8%BA%E5%81%B6%E6%95%B0%E5%9D%97/</id>
    <published>2021-03-26T12:23:20.000Z</published>
    <updated>2021-06-10T14:32:54.491Z</updated>
    
    <content type="html"><![CDATA[<p>达到完美境界并不是无以复加，而是无可去除。——&lt;安托万·德·圣·埃克苏佩里&gt;</p><h2><span id="介绍">介绍</span></h2><p>数组是 <code>JavaScript</code> 编程中最常用的结构之一，这就是为什么了解它的内置方法（例如口袋的背面）很重要的原因。</p><p>在本教程中，我们将看看在 <code>JavaScript</code> 中如何将数组拆分为 <code>n</code> 不同大小的块。</p><p>具体来说，我们将看看两种方法：</p><ul><li>使用 <code>slice()</code> 方法和 <code>for</code> 循环</li><li>使用 <code>splice()</code> 方法和 <code>while</code> 循环</li></ul><h2><span id="使用-slice-方法将数组拆分为偶数块">使用 slice() 方法将数组拆分为偶数块</span></h2><p>提取数组块的最简单方法，或者更确切地说，将其切片，是以下 <code>slice()</code> 方法：</p><blockquote><p><code>slice(start, end)</code> - 返回被调用数组的一部分，在 <code>start</code> 和 <code>end</code> 索引之间。</p></blockquote><p>注：这两个 <code>start</code> 和 <code>end</code> 可负整数，这只是表示，他们正在从数组的末尾列举。<code>-1</code> 是数组的最后一个元素，<code>-2</code> 倒数第二个等等…</p><p>返回的数组 <code>slice()</code> 返回一个浅拷贝，这意味着原始数组中的任何引用都将按原样复制，并且不会为全新的对象分配内存。</p><p>因此，要将列表或数组切成偶数块，让我们使用以下 <code>slice()</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sliceIntoChunks</span>(<span class="params">arr, chunkSize</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i += chunkSize) &#123;</span><br><span class="line">        <span class="keyword">const</span> chunk = arr.slice(i, i + chunkSize);</span><br><span class="line">        res.push(chunk);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="built_in">console</span>.log(sliceIntoChunks(arr, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行上面的代码会产生以下输出：</span></span><br><span class="line">[[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ], [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ], [ <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ], [ <span class="number">10</span> ]]</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将 <code>arr</code> 分解为大小为 <code>3</code> 的更小的块，方法是遍历数组并将其切片为每个 <code>chunkSize</code> 。在最后一次迭代中，只剩下一个元素<code>(10)</code>，它必须组成自己的块。</p><h2><span id="使用-splice-方法将数组分割成偶数块">使用 splice() 方法将数组分割成偶数块</span></h2><p>尽管 <code>splice()</code> 方法看起来与 <code>slice()</code> 方法类似，但它的使用和副作用是非常不同的。让我们仔细看看:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Splice does the following two things:</span></span><br><span class="line"><span class="comment">// 1. Removes deleteCount elements starting from startIdx (in-place)</span></span><br><span class="line"><span class="comment">// 2. Inserts the provided new elements (newElem1, newElem2...) into myArray starting with index startIdx (also in-place)</span></span><br><span class="line"><span class="comment">// The return value of this method is an array that contains all the deleted elements</span></span><br><span class="line">myArray.splice(startIdx, deleteCount, newElem1, newElem2...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrTest = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> chunk = arrTest.splice(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(chunk) <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arrTest) <span class="comment">// [1, 4]</span></span><br></pre></td></tr></table></figure><p>让我们通过一个代码示例来看看它的实际效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spliceIntoChunks</span>(<span class="params">arr, chunkSize</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">while</span> (arr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> chunk = arr.splice(<span class="number">0</span>, chunkSize);</span><br><span class="line">        res.push(chunk);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(spliceIntoChunks(arr, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 运行此代码产生：</span></span><br><span class="line"><span class="comment">// [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 7, 8 ] ]</span></span><br></pre></td></tr></table></figure><p>这里我们使用 <code>while</code> 循环来遍历数组。在每次迭代中，我们执行拼接操作并将每个块推送到结果数组中，直到原始数组中没有更多元素 <code>( arr.length &gt; 0)</code>。</p><p>需要注意的一个非常重要的事情是 <code>splice()</code> 更改了原始数组。其中 <code>asslice()</code> 创建了原始数组的副本，因此原始数组不会有任何更改。</p><h2><span id="总结">总结</span></h2><p>在本文中，我们讨论了几种在 <code>JavaScript</code> 中将列表拆分为偶数块的简单方法。尽管这样，我们学会了如何与几个像内置阵列方法的工作 <code>slice()</code> 和 <code>splice()</code></p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/how-to-split-an-array-into-even-chunks-in-javascript" target="_blank" rel="noopener">https://stackabuse.com/how-to-split-an-array-into-even-chunks-in-javascript</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;达到完美境界并不是无以复加，而是无可去除。——&amp;lt;安托万·德·圣·埃克苏佩里&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;数组是 &lt;code&gt;JavaScript&lt;/code&gt; 编程中最常用的结构之一，这就是为什么了解它的内置
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中常见注意事项</title>
    <link href="https://cl9000.github.io/2021/03/12/JavaScript%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://cl9000.github.io/2021/03/12/JavaScript%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2021-03-12T08:43:17.000Z</published>
    <updated>2021-06-01T12:11:14.794Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="windowheight获取到的高度不对">$(window).height()获取到的高度不对</span></h2><p><code>$(window).height()</code> 或 <code>document.documentElement.clientHeight</code><br>只需要将 <code>html5</code> 的声明整成标准的带有 <code>&lt;!doctype&gt;</code> 或 <code>&lt;!DOCTYPE&gt;</code> 的声明的就可以了。</p><p><a href="https://cl9000.gitee.io/web-code/18_%E9%A1%B5%E9%9D%A2%E9%98%85%E8%AF%BB%E8%BF%9B%E5%BA%A6%E6%9D%A1/" target="_blank" rel="noopener">示例Demo web-code 18</a></p><h2><span id="javascript展平多维数组">JavaScript展平多维数组</span></h2><p>将多维数组合并为单个数组的几种已知方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定此数组：</span></span><br><span class="line"><span class="keyword">var</span> myArray = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]];</span><br><span class="line"><span class="comment">// 想要这样的结果：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// 解决方案1：使用concat()和apply()</span></span><br><span class="line"><span class="keyword">var</span> myNewArray = [].concat.apply([], myArray); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案2：使用 reduce()</span></span><br><span class="line"><span class="keyword">var</span> myNewArray = myArray.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, curr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev.concat(curr);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案3：循环遍历</span></span><br><span class="line"><span class="keyword">var</span> myNewArray3 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myArray.length; ++i) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; myArray[i].length; ++j)</span><br><span class="line">    myNewArray3.push(myArray[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myNewArray3); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案4：在ES6中 使用 扩展运算符...</span></span><br><span class="line"><span class="keyword">var</span> myNewArray4 = [].concat(...myArray);</span><br><span class="line"><span class="built_in">console</span>.log(myNewArray4); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案5：在ES10中 使用 flat() </span></span><br><span class="line"><span class="keyword">var</span> myNewArray5 = myArray.flat();</span><br><span class="line"><span class="built_in">console</span>.log(myNewArray5);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>对于无限嵌套的数组，请尝试使用 Lodash 的 <code>flattenDeep()</code>。<br><a href="https://lodash.com/docs#flattenDeep" target="_blank" rel="noopener">flattenDeep - https://lodash.com/docs#flattenDeep</a></p><p>如果您对性能感到好奇，请在此处进行测试以检查其工作方式。<br><a href="https://jsperf.com/flatten-an-array-loop-vs-reduce/6" target="_blank" rel="noopener">https://jsperf.com/flatten-an-array-loop-vs-reduce/6</a></p><h2><span id="javascript代码段">JavaScript代码段</span></h2><p><code>setTimeout()</code> 并 <code>setInterval()</code> 接受参数，这些参数将传递给回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anArray = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = anArray.length; i &lt; l; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item); <span class="comment">// logs: one two three</span></span><br><span class="line">  &#125;, <span class="number">1</span>, anArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接数组而不创建新对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(a, b);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2><span id="页面卸载">页面卸载</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// ###### 监听页面 隐藏/显示 Start ##### ##### ##### ##### </span></span><br><span class="line">    <span class="comment">// query current page visibility state: prerender, visible, hidden</span></span><br><span class="line">    <span class="keyword">var</span> pageVisibility = <span class="built_in">document</span>.visibilityState;</span><br><span class="line">    <span class="comment">// subscribe to visibility change events</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// fires when user switches tabs, apps, goes to homescreen, etc.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.visibilityState == <span class="string">'hidden'</span>) &#123; </span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'hidden...'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fires when app transitions from prerender, user returns to the app / tab.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.visibilityState == <span class="string">'visible'</span>) &#123; </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'visible...'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">/// ###### 监听页面 隐藏/显示 End ##### ##### ##### #####</span></span><br></pre></td></tr></table></figure><h2><span id="换行问题">换行问题</span></h2><p>在显示内容的元素标签添加如下样式，（使用<code>v-html</code>绑定数据，同时支持 <code>\n 和 &lt;br/&gt;</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"white-space: pre-line;"</span> <span class="attr">v-html</span>=<span class="string">"htmlTxt"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样<code>\n（&lt;br/&gt;）</code>就能被识别，自动换行。(最低兼容到IE8)。<a href="https://caniuse.com/" target="_blank" rel="noopener">caniuse 兼容性查看</a></p><blockquote><p>**注意：**若经过JSON处理，后台传入的 \n 会被解析为字符串\ 和 n， 需要在处理一下 <code>str.replace(/\\n/g, '\n')</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;windowheight获取到的高度不对&quot;&gt;$(window).height()获取到的高度不对&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$(window).height()&lt;/code&gt; 或 &lt;code&gt;document.documentEleme
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 中动态合并两个对象的属性</title>
    <link href="https://cl9000.github.io/2021/03/04/Javascript%E4%B8%AD%E5%8A%A8%E6%80%81%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <id>https://cl9000.github.io/2021/03/04/Javascript%E4%B8%AD%E5%8A%A8%E6%80%81%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7/</id>
    <published>2021-03-04T14:32:12.000Z</published>
    <updated>2021-06-10T14:40:14.523Z</updated>
    
    <content type="html"><![CDATA[<p>不畏惧失败是创造力的一个基本要素。——&lt;艾尔文·兰德博士&gt;</p><h2><span id="介绍">介绍</span></h2><p>在 <code>JavaScript</code> 中，对象被定义为键值对的集合。对象也是一种非原始数据类型。</p><p>您经常需要将对象合并为一个，其中包含其组成部分的所有单独属性。此操作称为合并。执行此操作的两种最常见方法是：</p><ul><li>使用 <strong>扩展运算符(…)</strong></li><li>使用 <code>Object.assign()</code>方法</li></ul><p>在本教程中，我们将看看如何在 <code>JavaScript</code> 中动态合并两个对象。</p><p>之后，我们将介绍浅合并和深合并之间的区别，因为这对于完全理解对象合并至关重要。</p><h2><span id="使用扩展运算符合并-javascript-对象">使用扩展运算符合并 JavaScript 对象</span></h2><p>我们可以使用 <code>扩展运算符(...)</code> 将不同的对象合并为一个。这也是合并两个或多个对象的最常用方法。</p><p>这是合并两个对象的不可变方法，即用于合并对象的起始两个对象不会因副作用而以任何方式改变。最后，您得到了一个新对象，由两者构建而成，而它们仍然完好无损。</p><p>让我们创建两个对象并合并它们</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">onst person = &#123;</span><br><span class="line">    name: <span class="string">"John Doe"</span>,</span><br><span class="line">    age: <span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> job = &#123;</span><br><span class="line">    title: <span class="string">"Full stack developer"</span>,</span><br><span class="line">    location: <span class="string">"Remote"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employee = &#123;...person, ...job&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(employee);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     name: "John Doe", </span></span><br><span class="line"><span class="comment">//     age: 24, </span></span><br><span class="line"><span class="comment">//     title: "Full stack developer", </span></span><br><span class="line"><span class="comment">//     location: "Remote"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>注意：如果这两个对象之间存在共同的属性，例如它们都有一个 <code>location</code> ，则第二个对象 (job) 的属性将覆盖第一个对象 ( person)的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"John Doe"</span>,</span><br><span class="line">    location: <span class="string">"Remote"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> job = &#123;</span><br><span class="line">    title: <span class="string">"Full stack developer"</span>,</span><br><span class="line">    location: <span class="string">"Office"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> employee = &#123;...person, ...job&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(employee);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name: 'John Doe',</span></span><br><span class="line"><span class="comment">//   location: 'Office',</span></span><br><span class="line"><span class="comment">//   title: 'Full stack developer'</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>如果要合并两个以上的对象，则最右侧的对象会覆盖左侧的对象。</p><h2><span id="使用-objectassign-合并-javascript-对象">使用 Object.assign() 合并 JavaScript 对象</span></h2><p>合并两个或多个对象的另一种常用方法是使用内置Object.assign()方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2, ...);</span><br></pre></td></tr></table></figure><p>此方法将一个或多个源对象的所有属性复制到目标对象中。就像扩展运算符一样，在覆盖时，使用最右边的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"John Doe"</span>, </span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    location: <span class="string">"U.S.A"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> job = &#123;</span><br><span class="line">    title: <span class="string">"Full stack developer"</span>,</span><br><span class="line">    location: <span class="string">"Remote"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employee = <span class="built_in">Object</span>.assign(person, job);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(employee);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     name: "John Doe", </span></span><br><span class="line"><span class="comment">//     age: 24,</span></span><br><span class="line"><span class="comment">//     location: "Remote",</span></span><br><span class="line"><span class="comment">//     title: "Full stack developer"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>同样，请记住，<code>employee</code> 引用的对象是一个全新的对象，并且不能与 <code>person</code> 或 <code>job</code> 引用的对象相链接。</p><h2><span id="浅合并与深合并">浅合并与深合并</span></h2><p>在浅合并的情况下，如果源对象上的一个属性是另一个对象，则目标对象包含对源对象中存在的同一对象的引用。在这种情况下不会创建新对象。</p><p>让我们调整前一个 <code>person</code> 对象，并 <code>location</code> 为自己创建一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"John Doe"</span>,</span><br><span class="line">    location: &#123;</span><br><span class="line">        city: <span class="string">"London"</span>, </span><br><span class="line">        country: <span class="string">"England"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> job = &#123;</span><br><span class="line">    title: <span class="string">"Full stack developer"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employee = &#123;...person, ...job&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(employee.location === person.location); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们可以看到 <code>person</code> 和 <code>employee</code> 对象中对 <code>location</code> 对象的引用是相同的。实际上，<code>扩展操作符(...)</code> 和 <code>Object.assign()</code> 都执行浅合并。</p><p><code>JavaScript</code> 没有现成的深度合并支持。然而，有第三方模块和库支持它，比如 <code>Lodash</code> 的 <code>_.merge</code>。<br><a href="https://www.npmjs.com/package/lodash.merge" target="_blank" rel="noopener">https://www.npmjs.com/package/lodash.merge</a></p><h2><span id="总结">总结</span></h2><p>在本教程中，我们介绍了如何在JavaScript中合并两个对象。我们已经研究了 <code>扩展操作符(...)</code>和 <code>Object.assign()</code> 方法，它们都执行两个或多个对象的浅合并。</p><h2><span id="参考">参考</span></h2><ul><li><a href="https://stackabuse.com/merge-properties-of-two-objects-dynamically-in-javascript" target="_blank" rel="noopener">https://stackabuse.com/merge-properties-of-two-objects-dynamically-in-javascript</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不畏惧失败是创造力的一个基本要素。——&amp;lt;艾尔文·兰德博士&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;介绍&quot;&gt;介绍&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;JavaScript&lt;/code&gt; 中，对象被定义为键值对的集合。对象也是一种非原始数据类型。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://cl9000.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的 链判断运算符【?.】</title>
    <link href="https://cl9000.github.io/2021/01/28/JavaScript%E4%B8%AD%E7%9A%84%E9%93%BE%E5%88%A4%E6%96%AD%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://cl9000.github.io/2021/01/28/JavaScript%E4%B8%AD%E7%9A%84%E9%93%BE%E5%88%A4%E6%96%AD%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-01-28T09:12:40.000Z</published>
    <updated>2021-05-25T02:25:54.561Z</updated>
    
    <content type="html"><![CDATA[<p>人生不是一种享乐，而是一桩十分沉重的工作。 —-&lt;列夫·托尔斯泰&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/</a></p></blockquote><p>链判断运算符<code>?.</code> 用于通过隐式空检查访问嵌套的对象属性。</p><h2><span id="概述">概述</span></h2><p>如何使用无效<code>（null和undefined）</code>检查访问对象的嵌套属性？假设我们必须通过网络api的响应访问用户详细信息？</p><p>您可以<code>? ... :</code>像这样使用嵌套的三元运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response ? (response.data ? (response.data.user ? response.data.user.name : <span class="literal">null</span>) : <span class="literal">null</span>) : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>或者您可以在<code>if</code>这种情况下进行空值检查：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userName = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(response &amp;&amp; response.data &amp;&amp; response.data.user)&#123;</span><br><span class="line">  userName = response.data.user.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至更好的方法可以使其&amp;&amp;像这样的单衬板链条状态：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response &amp;&amp; response.data &amp;&amp; response.data.user &amp;&amp; response.data.user.name;</span><br></pre></td></tr></table></figure><p>上面的代码的共同点是，链接有时可能真的很长，并且变得更加难以格式化和读取。这是可选的链接?.运算符提供帮助的地方，该运算符提供了隐式的无效检查，并使我们的代码更小，更好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userName = response?.data?.user?.name;</span><br></pre></td></tr></table></figure><h2><span id="句法">句法</span></h2><p>链判断运算符<code>?.</code> 在<code>Javascript ES2020</code>中引入，其语法如下：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.val?.prop       returns obj.val.prop <span class="keyword">if</span> val exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.func?.(args)    returns obj.func(args) <span class="keyword">if</span> func exists, otherwise <span class="literal">undefined</span>.</span><br><span class="line">obj.arr?.[index]    returns obj.array[index] <span class="keyword">if</span> array exists, otherwise <span class="literal">undefined</span>.</span><br></pre></td></tr></table></figure><p>使用链判断运算符<code>?.</code> 运算符</p><p>让我们看看<code>?.</code>操作符与<code>user</code>对象的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  homeaddress: &#123;</span><br><span class="line">    country: <span class="string">"USA"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hobbies: [&#123;<span class="attr">name</span>: <span class="string">"Coding"</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">"Cooking"</span>&#125;],</span><br><span class="line">  getFirstName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="具有属性">具有属性</span></h2><p>访问存在的属性返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.homeaddress.country); </span><br><span class="line"><span class="comment">// prints "USA";</span></span><br></pre></td></tr></table></figure><p>访问不存在的属性会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress.country); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'country' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用链判断运算符<code>?.</code>不存在的链判断运算符运算符访问属性将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.officeaddress?.country); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="具有功能">具有功能</span></h2><p>调用存在的函数返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getFirstName()); </span><br><span class="line"><span class="comment">// prints "John";</span></span><br></pre></td></tr></table></figure><p>调用不存在的函数会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName()); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: user.getLastName is not a function";</span></span><br></pre></td></tr></table></figure><p>用链判断运算符<code>?.</code>不存在的<code>Optional chaining operator</code>调用一个函数将返回<code>undefined：-</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.getLastName?.()); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与数组">与数组</span></h2><p>访问数组的现有索引返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// prints "Coding";</span></span><br></pre></td></tr></table></figure><p>访问数组的不存在的索引会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property 'name' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用链判断运算符<code>?.</code>访问数组的不存在的索引，将返回undefined：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.hobbies[<span class="number">3</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>访问不存在的数组会引发错误：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes[<span class="number">0</span>].name); </span><br><span class="line"><span class="comment">// throws error "Uncaught TypeError: Cannot read property '0' of undefined"</span></span><br></pre></td></tr></table></figure><p>使用链判断运算符<code>?.</code>不存在的访问数组将返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(user.dislikes?.[<span class="number">0</span>]?.name); </span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><h2><span id="与空值合并运算符">与空值合并运算符 ??</span></h2><p>现在，您知道如果对象不存在，则链判断运算符<code>?.</code>将返回<code>undefined</code>。有时您想返回一个值，而不是<code>undefined</code>，通过使用空值合并运算符<code>??</code> 和链判断运算符<code>?.</code>来返回一个值。</p><p>如果没有空值合并运算符<code>??</code>，则返回<code>undefined</code>：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "undefined"</span></span><br></pre></td></tr></table></figure><p>使用空值合并运算符<code>??</code>，返回默认值：-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> country = user.officeaddress?.country ?? <span class="string">"USA"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(country);</span><br><span class="line"><span class="comment">// prints "USA"</span></span><br></pre></td></tr></table></figure><h2><span id="参考">参考</span></h2><ul><li><a href="https://codingnconcepts.com/javascript/optional-chaining-operator-javascript/" target="_blank" rel="noopener">原文链接 https://seifi.org/javascript/optional-chaining-in-javascript.html</a></li><li><a href="https://seifi.org/javascript/optional-chaining-in-javascript.html" target="_blank" rel="noopener">https://seifi.org/javascript/optional-chaining-in-javascript.html</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生不是一种享乐，而是一桩十分沉重的工作。 —-&amp;lt;列夫·托尔斯泰&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcepts.com/ja
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中循环遍历数组</title>
    <link href="https://cl9000.github.io/2021/01/25/JavaScript%E4%B8%AD%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/"/>
    <id>https://cl9000.github.io/2021/01/25/JavaScript%E4%B8%AD%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</id>
    <published>2021-01-25T14:52:50.000Z</published>
    <updated>2021-05-05T15:00:56.549Z</updated>
    
    <content type="html"><![CDATA[<p>To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&lt;芒格&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-loop-through-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-loop-through-array-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何使用JavaScript中的不同方法循环遍历数组的元素。</p><h2><span id="1-for循环">1. for循环</span></h2><p>在for通过阵列的索引用于循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i, array[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>0 &quot;one&quot;<br>1 &quot;two&quot;<br>2 “three”</p></blockquote><h2><span id="2-for-in-循环">2. for-in 循环</span></h2><p><code>for-in</code> 语句遍历数组的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index, array[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>0 &quot;one&quot;<br>1 &quot;two&quot;<br>2 “three”</p></blockquote><h2><span id="3-for-of-循环">3. for-of 循环</span></h2><p><code>for-of</code>语句遍历数组的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">of</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>one<br>two<br>three</p></blockquote><h2><span id="4-arrayforeach">4. Array.forEach()</span></h2><p>Array.forEach()方法采用回调函数来遍历数组。我们可以在回调中使用ES6箭头函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>];</span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="built_in">console</span>.log(index, item));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Output</strong><br>0 &quot;one&quot;<br>1 &quot;two&quot;<br>2 “three”</p></blockquote><p>这是在JavaScript中循环访问数组的四种不同方法。建议<code>Array.forEach()</code>与箭头功能一起使用，这会使您的代码非常简短且易于理解。</p><p>尽管有一个限制，我们不能使用break;和continue;流控制语句与<code>Array.forEach()</code>方法。如果你想这样做，使用<code>for，for-in或for-of</code>环代替。</p><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/how-to-loop-through-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-loop-through-array-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To the one with a hammer, everything looks like a nail. （手中有锤，看什么都像钉）——&amp;lt;芒格&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;

      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中在数组中查找元素</title>
    <link href="https://cl9000.github.io/2021/01/25/JavaScript%E4%B8%AD%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/"/>
    <id>https://cl9000.github.io/2021/01/25/JavaScript%E4%B8%AD%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/</id>
    <published>2021-01-25T13:22:37.000Z</published>
    <updated>2021-05-04T13:33:20.048Z</updated>
    
    <content type="html"><![CDATA[<p>人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&lt;阿尔伯特·爱因斯坦&gt;</p><blockquote><p>作者：Ashish Lahoti<br>译者：cl9000<br>来源：<a href="https://codingnconcepts.com/javascript/how-to-search-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-search-array-in-javascript/</a></p></blockquote><p>在本教程中，我们将学习如何使用 <code>JavaScript</code> 中的不同Array方法在Array中搜索元素。</p><h2><span id="1-arrayfilter">1. Array.filter()</span></h2><p>Array.filter()方法将条件作为函数，并返回满足该条件的元素数组。</p><h4><span id="例子1">例子1</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allEvenNumbers  =  array.filter(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>==<span class="number">0</span>);  <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="keyword">const</span> allOddNumbers   =  array.filter(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>==<span class="number">1</span>);  <span class="comment">// [1, 3, 5, 7, 9]</span></span><br><span class="line"><span class="keyword">const</span> greaterThanNine =  array.filter(<span class="function"><span class="params">n</span> =&gt;</span> n&gt;<span class="number">9</span>);     <span class="comment">// [10]</span></span><br></pre></td></tr></table></figure><h4><span id="例子2">例子2</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mango"</span>,  <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">135</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apple"</span>,  <span class="attr">color</span>: <span class="string">"red"</span>,    <span class="attr">calories</span>: <span class="number">65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"orange"</span>, <span class="attr">color</span>: <span class="string">"orange"</span>, <span class="attr">calories</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"kiwi"</span>,   <span class="attr">color</span>: <span class="string">"green"</span>,  <span class="attr">calories</span>: <span class="number">46</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yellowFruits = fruits.filter(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.color == <span class="string">"yellow"</span>).map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name); <span class="comment">// ["mango", "banana"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lowCalories  = fruits.filter(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.calories &lt;=<span class="number">50</span>).map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name); <span class="comment">// ["orange", "kiwi"]</span></span><br></pre></td></tr></table></figure><h2><span id="2-arrayfind">2. Array.find()</span></h2><p><code>Array.find()</code> 方法将条件作为函数，并返回满足该条件的第一个元素。</p><h4><span id="例子1">例子1</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allEvenNumbers  =  array.find(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>==<span class="number">0</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> allOddNumbers   =  array.find(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>==<span class="number">1</span>);  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> greaterThanNine =  array.find(<span class="function"><span class="params">n</span> =&gt;</span> n&gt;<span class="number">9</span>);     <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h4><span id="例子2">例子2</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mango"</span>,  <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">135</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apple"</span>,  <span class="attr">color</span>: <span class="string">"red"</span>,    <span class="attr">calories</span>: <span class="number">65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"orange"</span>, <span class="attr">color</span>: <span class="string">"orange"</span>, <span class="attr">calories</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"kiwi"</span>,   <span class="attr">color</span>: <span class="string">"green"</span>,  <span class="attr">calories</span>: <span class="number">46</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yellowFruits = fruits.find(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.color == <span class="string">"yellow"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(yellowFruits); <span class="comment">// prints &#123;name: "mango", color: "yellow", calories: 135&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lowCalories  = fruits.find(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.calories &lt;=<span class="number">50</span>); </span><br><span class="line"><span class="built_in">console</span>.log(lowCalories); <span class="comment">// prints &#123;name: "orange", color: "orange", calories: 50&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="3-arrayincludes">3. Array.includes()</span></h2><p>Array.includes()方法寻找给定值，并返回true，如果在数组中查找，否则返回false。</p><h4><span id="例子1">例子1</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> includesTen    = array.includes(<span class="number">10</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> includesTwenty = array.includes(<span class="number">20</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4><span id="例子2">例子2</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mango"</span>,  <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">135</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apple"</span>,  <span class="attr">color</span>: <span class="string">"red"</span>,    <span class="attr">calories</span>: <span class="number">65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"orange"</span>, <span class="attr">color</span>: <span class="string">"orange"</span>, <span class="attr">calories</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"kiwi"</span>,   <span class="attr">color</span>: <span class="string">"green"</span>,  <span class="attr">calories</span>: <span class="number">46</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> includesMango = fruits.map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name).includes(<span class="string">"mango"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> includesBlue  = fruits.map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.color).includes(<span class="string">"blue"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4><span id="例子3">例子3</span></h4><p>计算给定字符串中的元音数量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vowels = [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>];</span><br><span class="line"><span class="keyword">const</span> string = <span class="string">"codingnconcepts"</span>;</span><br><span class="line"><span class="keyword">const</span> countVowels = word.split(<span class="string">""</span>).map(<span class="function"><span class="params">char</span> =&gt;</span> vowels.includes(char) ? <span class="number">1</span> : <span class="number">0</span>).reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line"><span class="built_in">console</span>.log(countVowels); <span class="comment">// prints "4"</span></span><br></pre></td></tr></table></figure><h2><span id="4-arrayindexof">4. Array.indexOf()</span></h2><p><code>Array.indexOf()</code> 方法查找给定值，如果在数组中找到，则返回索引，否则返回-1。</p><h4><span id="例子1">例子1</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indexOfTen    = array.indexOf(<span class="number">10</span>);  <span class="comment">// 9</span></span><br><span class="line"><span class="keyword">const</span> indexOfTwenty = array.indexOf(<span class="number">20</span>);  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4><span id="例子2">例子2</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"mango"</span>,  <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">135</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"banana"</span>, <span class="attr">color</span>: <span class="string">"yellow"</span>, <span class="attr">calories</span>: <span class="number">60</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apple"</span>,  <span class="attr">color</span>: <span class="string">"red"</span>,    <span class="attr">calories</span>: <span class="number">65</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"orange"</span>, <span class="attr">color</span>: <span class="string">"orange"</span>, <span class="attr">calories</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"kiwi"</span>,   <span class="attr">color</span>: <span class="string">"green"</span>,  <span class="attr">calories</span>: <span class="number">46</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indexOfMango = fruits.map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.name).indexOf(<span class="string">"mango"</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">const</span> indexOfBlue  = fruits.map(<span class="function"><span class="params">fruit</span> =&gt;</span> fruit.color).indexOf(<span class="string">"blue"</span>); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4><span id="参考">参考</span></h4><ul><li><a href="https://codingnconcepts.com/javascript/how-to-search-array-in-javascript/" target="_blank" rel="noopener">https://codingnconcepts.com/javascript/how-to-search-array-in-javascript/</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">MDN - https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf</a></li></ul><p><strong>关注【公众号】，了解更多。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cl9000/wel-imgs/blogImgs/a_weicl.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人只有献身于社会，才能找出那短暂而有风险的生命的意义。 ——&amp;lt;阿尔伯特·爱因斯坦&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：Ashish Lahoti&lt;br&gt;
译者：cl9000&lt;br&gt;
来源：&lt;a href=&quot;https://codingnconcept
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://cl9000.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
